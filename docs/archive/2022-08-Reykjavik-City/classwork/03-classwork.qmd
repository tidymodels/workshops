---
title: "3 - What makes a model? - Classwork"
subtitle: "Machine learning with tidymodels"
editor_options: 
  chunk_output_type: console
---

We recommend restarting R between each slide deck!

## Setup

Setup from deck 2

```{r}
library(tidymodels)

data("tree_frogs", package = "stacks")

tree_frogs <- tree_frogs %>%
  mutate(t_o_d = factor(t_o_d),
         age = age / 86400) %>%
  filter(!is.na(latency)) %>%
  select(-c(clutch, hatched))

set.seed(123)

frog_split <- initial_split(tree_frogs, prop = 0.8, strata = latency)
frog_train <- training(frog_split)
frog_test <- testing(frog_split)
```

## Your turn

How do you fit a linear model in R?

How many different ways can you think of?

Discuss with your neighbor!

## To specify a model

```{r}
# Model
linear_reg()

# Engine
linear_reg() %>%
  set_engine("glmnet")

# Mode - Some models have a default mode, others don't
decision_tree() %>% 
  set_mode("regression")
```

## Your turn

Edit the chunk below to use a different model!

```{r tree_spec}
tree_spec <- decision_tree() %>% 
  set_mode("regression")

tree_spec
```

## A model workflow

```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")
```

Fit with parsnip:

```{r}
tree_spec %>% 
  fit(latency ~ ., data = frog_train) 
```

Fit with a workflow:

```{r}
workflow() %>%
  add_formula(latency ~ .) %>%
  add_model(tree_spec) %>%
  fit(data = frog_train) 
```

"Shortcut" by specifying the preprocessor and model spec directly in the `workflow()` call:

```{r}
workflow(latency ~ ., tree_spec) %>% 
  fit(data = frog_train) 
```

## Your turn

This is how you'd fit a decision model:

```{r tree_wflow}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")

tree_wflow <- workflow() %>%
  add_formula(latency ~ .) %>%
  add_model(tree_spec)

tree_wflow
```

Now use a similar approach to fit a linear model! Call it `lm_wflow`.

```{r}
### Your code here

```

## Predict with your model

```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")

tree_fit <-
  workflow(latency ~ ., tree_spec) %>% 
  fit(data = frog_train) 
```

## Your turn

What do you get from running the following code? What do you notice about the structure of the result?

```{r}
predict(tree_fit, new_data = frog_test)
```

## Your turn

What do you get from running the following code? How is `augment()` different from `predict()`?

```{r}
augment(tree_fit, new_data = frog_test)
```

## Understand your model

```{r}
library(rpart.plot)

tree_fit %>%
  extract_fit_engine() %>%
  rpart.plot(roundint = FALSE)
```

## Your turn

Try extracting the model engine object from your fitted linear workflow, `lm_wflow`.

```{r}
### Your code here

```

What kind of object is it? What can you do with it?

⚠️ Never `predict()` with any extracted components!

You can also read the documentation for object extraction:
https://workflows.tidymodels.org/reference/extract-workflow.html

## Your turn

Explore how you might deploy your `tree_fit` model using vetiver.

```{r vetiver}
library(vetiver)
library(plumber)

# Create a vetiver model object
v <- vetiver_model(tree_fit, "frog_hatching")
v
```

```{r}
# Create a predictable Plumber API
pr <- pr() %>%
  vetiver_api(v)

pr
```

```{r}
# Run the API server in a new window
pr_run(pr)
```
