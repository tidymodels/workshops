---
title: "5 - Iterative Search - Classwork"
subtitle: "Advanced tidymodels"
editor_options: 
  chunk_output_type: console
---

We recommend restarting R between each slide deck!

## Setup

```{r}
library(tidymodels)
library(probably)
library(finetune)

# ------------------------------------------------------------------------------
# Some options

tidymodels_prefer()
theme_set(theme_bw())
options(pillar.advice = FALSE, pillar.min_title_chars = Inf)

# ------------------------------------------------------------------------------
# For parallel processing. You can use these if you like:

# cores <- parallelly::availableCores(logical = FALSE)
# cl <- parallel::makePSOCKcluster(cores)
# doParallel::registerDoParallel(cl)

# ------------------------------------------------------------------------------
# Setup the data

data(hotel_rates)
set.seed(295)
hotel_rates <- 
  hotel_rates %>% 
  sample_n(5000) %>% 
  arrange(arrival_date) %>% 
  select(-arrival_date) %>%  
  mutate(
    company = factor(as.character(company)),
    country = factor(as.character(country)),
    agent = factor(as.character(agent))
  )

set.seed(4028)
hotel_split <- initial_split(hotel_rates, strata = avg_price_per_room)

hotel_train <- training(hotel_split)
hotel_test <- testing(hotel_split)

set.seed(472)
hotel_rs <- vfold_cv(hotel_train, strata = avg_price_per_room)
```

## Our Boosting Model

```{r}
#| label: setup-lgbm

lgbm_spec <- 
  boost_tree(trees = 1000, learn_rate = tune(), min_n = tune(), 
             tree_depth = tune(), loss_reduction = tune(), 
             stop_iter = tune()) %>% 
  set_mode("regression") %>% 
  set_engine("lightgbm", num_threads = 1)

lgbm_wflow <- workflow(avg_price_per_room ~ ., lgbm_spec)

lgbm_param <- 
  lgbm_wflow %>%
    extract_parameter_set_dials() %>%
    update(learn_rate = learn_rate(c(-5, -1)))
```

## An Initial Grid

```{r tuning} 
#| label: lgb-bo-initial
#| cache: true
reg_metrics <- metric_set(mae, rsq)

set.seed(12)
init_res <-
  lgbm_wflow %>%
  tune_grid(
    resamples = hotel_rs,
    grid = nrow(lgbm_param) + 2,
    param_info = lgbm_param,
    metrics = reg_metrics
  )

show_best(init_res, metric = "mae") %>% select(-.metric, -.estimator)
```

## BO using tidymodels

```{r tuning} 
#| label: lgb-bo
#| cache: true
#| message: true
#| code-line-numbers: "1|6,8-11|"

ctrl_bo <- control_bayes(verbose_iter = TRUE) # <- for demonstration

set.seed(15)
lgbm_bayes_res <-
  lgbm_wflow %>%
  tune_bayes(
    resamples = hotel_rs,
    initial = init_res,     # <- initial results
    iter = 20,
    param_info = lgbm_param,
    control = ctrl_bo,
    metrics = reg_metrics
  )
```


## Your turn {transition="slide-in"}

*Let's try a different acquisition function: `conf_bound(kappa)`.*

*We'll use the `objective` argument to set it.*

*Choose your own `kappa` value:*

 - *Larger values will explore the space more.* 
 - *"Large" values are usually less than one.*

**Bonus points**: Before the optimization is done, press `<esc>` and see what happens.


```{r}
# Your code here!

```
