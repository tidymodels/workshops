{
  "hash": "1d10beda5cd8c6dfe9e96fde0fd51d11",
  "result": {
    "markdown": "---\ntitle: \"Extras - Recipes\"\nsubtitle: \"Introduction to tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n## Looking at the predictors\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_train\n#> # A tibble: 8,000 × 7\n#>    tip   distance company                      local dow   month  hour\n#>    <fct>    <dbl> <fct>                        <fct> <fct> <fct> <int>\n#>  1 yes      17.2  Chicago Independents         no    Thu   Feb      16\n#>  2 yes       0.88 City Service                 yes   Thu   Mar       8\n#>  3 yes      18.1  other                        no    Mon   Feb      18\n#>  4 yes      12.2  Chicago Independents         no    Sun   Mar      21\n#>  5 yes       0.94 Sun Taxi                     yes   Sat   Apr      23\n#>  6 yes      17.5  Flash Cab                    no    Fri   Mar      12\n#>  7 yes      17.7  other                        no    Sun   Jan       6\n#>  8 yes       1.85 Taxicab Insurance Agency Llc no    Fri   Apr      12\n#>  9 yes       0.53 Sun Taxi                     no    Tue   Mar      18\n#> 10 yes       6.65 Taxicab Insurance Agency Llc no    Sun   Apr      11\n#> # ℹ 7,990 more rows\n```\n:::\n\n\n## Working with other models\n\nSome models can't handle non-numeric data\n\n-   Linear Regression\n-   K Nearest Neighbors\n\n<br>\n\n::: fragment\nSome models struggle if numeric predictors aren't scaled\n\n-   K Nearest Neighbors\n-   Anything using gradient descent\n:::\n\n## Types of needed preprocessing\n\n-   Do qualitative predictors require a numeric encoding?\n\n-   Should columns with a single unique value be removed?\n\n-   Does the model struggle with missing data?\n\n-   Does the model struggle with correlated predictors?\n\n-   Should predictors be centered and scaled?\n\n-   Is it helpful to transform predictors to be more symmetric?\n\n::: footer\n<https://www.tmwr.org/pre-proc-table.html>\n:::\n\n## Two types of preprocessing\n\n![](images/fe_venn.svg){fig-align=\"center\"}\n\n## Two types of preprocessing\n\n![](images/fe_venn_info.svg){fig-align=\"center\"}\n\n## General definitions\n\n* _Data preprocessing_ are the steps that you take to make your model **successful**.\n* _Feature engineering_ are what you do to the original predictors to make the model do the **least work** to perform great.\n\n## Working with dates\n\nDatetime variables are automatically converted to an integer if given as a raw predictor. To avoid this, it can be re-encoded as:\n\n* Days since a reference date\n* Day of the week\n* Month\n* Year\n* Leap year\n* Indicators for holidays\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n<br>\n\n*What other transformations could we do with the raw time variable?*\n\n*Remember that the transformations are tied to the specific modeling problem.*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"datetime-split\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Two types of transformations\n\n<br>\n\n::: columns\n::: {.column width=\"50%\"}\n\n### Static\n\n- Square root, log, inverse\n- Dummies for known levels\n- Date time extractions\n\n:::\n\n::: {.column width=\"50%\"}\n\n### Trained\n\n- Centering & scaling\n- Imputation\n- PCA\n- Anything for unknown factor levels\n\n:::\n\n:::\n\n::: fragment\nTrained methods need to calculate **sufficient information** to be applied again.\n:::\n\n## The recipes package\n\n::: {.incremental .highlight-last}\n- Modular + extensible\n- Works well with pipes ,`|>` and `%>%`\n- Deferred evaluation\n- Isolates test data from training data\n- Can do things formulas can't\n:::\n\n\n## How to write a recipe\n\n:::{style=\"font-family: 'Source Code Pro', monospace; font-size: 0.8em;\"}\ntaxi_rec <- recipe(tip ~ ., data = taxi_train) %>%  \n\\ \\ step_unknown(all_nominal_predictors()) %>%  \n\\ \\ step_dummy(all_nominal_predictors()) %>%  \n\\ \\ step_zv(all_predictors()) %>%  \n\\ \\ step_log(distance, offset = 0.5) %>%  \n\\ \\ step_normalize(all_numeric_predictors())\n:::\n\n## How to write a recipe\n\n:::{style=\"font-family: 'Source Code Pro', monospace; font-size: 0.8em;\"}\ntaxi_rec <- [recipe(tip ~ ., data = taxi_train)]{style=\"color: #CA225E;\"} %>%  \n\\ \\ step_unknown(all_nominal_predictors()) %>%  \n\\ \\ step_dummy(all_nominal_predictors()) %>%  \n\\ \\ step_zv(all_predictors()) %>%  \n\\ \\ step_log(distance, offset = 0.5) %>%  \n\\ \\ step_normalize(all_numeric_predictors())\n:::\n\n<br>\n\nStart by calling `recipe()` to denote the data source and variables used.\n\n## How to write a recipe\n\n:::{style=\"font-family: 'Source Code Pro', monospace; font-size: 0.8em;\"}\ntaxi_rec <- recipe(tip ~ ., data = taxi_train) %>%  \n\\ \\ [step_unknown]{style=\"color: #CA225E;\"}(all_nominal_predictors()) %>%  \n\\ \\ [step_dummy]{style=\"color: #CA225E;\"}(all_nominal_predictors()) %>%  \n\\ \\ [step_zv]{style=\"color: #CA225E;\"}(all_predictors()) %>%  \n\\ \\ [step_log]{style=\"color: #CA225E;\"}(distance, offset = 0.5) %>%  \n\\ \\ [step_normalize]{style=\"color: #CA225E;\"}(all_numeric_predictors())\n:::\n\n<br>\n\nSpecify what actions to take by adding `step_*()`s.\n\n## How to write a recipe\n\n:::{style=\"font-family: 'Source Code Pro', monospace; font-size: 0.8em;\"}\ntaxi_rec <- recipe(tip ~ ., data = taxi_train) %>%  \n\\ \\ step_unknown([all_nominal_predictors()]{style=\"color: #CA225E;\"}) %>%  \n\\ \\ step_dummy([all_nominal_predictors()]{style=\"color: #CA225E;\"}) %>%  \n\\ \\ step_zv([all_predictors()]{style=\"color: #CA225E;\"}) %>%  \n\\ \\ step_log([distance]{style=\"color: #CA225E;\"}, offset = 0.5) %>% \n\\ \\ step_normalize([all_numeric_predictors()]{style=\"color: #CA225E;\"})\n:::\n<br>\n\nUse {tidyselect} and recipes-specific selectors to denote affected variables.\n\n## Using a recipe\n\n:::{style=\"font-family: 'Source Code Pro', monospace; font-size: 0.8em;\"}\ntaxi_rec <- recipe(tip ~ ., data = taxi_train) %>%  \n\\ \\ step_unknown(all_nominal_predictors()) %>%  \n\\ \\ step_dummy(all_nominal_predictors()) %>%  \n\\ \\ step_zv(all_predictors()) %>%  \n\\ \\ step_log(distance, offset = 0.5) %>% \n\\ \\ step_normalize(all_numeric_predictors())\n:::\n\n<br>\n\nSave the recipe we like so that we can use it in various places, e.g., with different models.\n\n<br>\n\n## Using a recipe with workflows\n\nRecipes are typically combined with a model in a `workflow()` object:\n\n<br>\n\n:::{style=\"font-family: 'Source Code Pro', monospace; font-size: 0.8em;\"}\ntaxi_wflow <- workflow() %>%  \n\\ \\ [add_recipe(taxi_rec)]{style=\"color: #CA225E;\"} %>%  \n\\ \\ add_model(linear_reg())\n:::\n\n## Recipes are estimated\n\nEvery preprocessing step in a recipe that involved calculations uses the *training* set. For example:\n\n- Levels of a factor\n- Determination of zero-variance\n- Normalization\n- Feature extraction\n\nOnce a recipe is added to a workflow, this occurs when `fit()` is called.\n\n\n## Debugging a recipe\n\n- Typically, you will want to use a workflow to estimate and apply a recipe.\n\n. . .\n\n- If you have an error and need to debug your recipe, the original recipe object (e.g. `taxi_rec`) can be estimated manually with a function called `prep()`. It is analogous to `fit()`. See [TMwR section 16.4](https://www.tmwr.org/dimensionality.html#recipe-functions).\n\n. . .\n\n- Another function, `bake()`, is analogous to `predict()`, and gives you the processed data back.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n<br>\n\n*Take the recipe and `prep()` then `bake()` it to see what the resulting data set looks like.*\n\n*Try removing steps to see how the result changes.*\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"recipes-prep\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Printing a recipe\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_rec\n#> \n#> ── Recipe ────────────────────────────────────────────────────────────\n#> \n#> ── Inputs\n#> Number of variables by role\n#> outcome:   1\n#> predictor: 6\n#> \n#> ── Operations\n#> • Unknown factor level assignment for: all_nominal_predictors()\n#> • Dummy variables from: all_nominal_predictors()\n#> • Zero variance filter on: all_predictors()\n#> • Log transformation on: distance\n#> • Centering and scaling for: all_numeric_predictors()\n```\n:::\n\n\n## Prepping a recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep(taxi_rec)\n#> \n#> ── Recipe ────────────────────────────────────────────────────────────\n#> \n#> ── Inputs\n#> Number of variables by role\n#> outcome:   1\n#> predictor: 6\n#> \n#> ── Training information\n#> Training data contained 8000 data points and no incomplete rows.\n#> \n#> ── Operations\n#> • Unknown factor level assignment for: company and local, ... |\n#>   Trained\n#> • Dummy variables from: company, local, dow, month | Trained\n#> • Zero variance filter removed: company_unknown, ... | Trained\n#> • Log transformation on: distance | Trained\n#> • Centering and scaling for: distance and hour, ... | Trained\n```\n:::\n\n\n## Baking a recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep(taxi_rec) %>%\n  bake(new_data = taxi_train)\n#> # A tibble: 8,000 × 19\n#>    distance   hour tip   company_City.Service company_Flash.Cab company_Sun.Taxi company_Taxi.Affiliatio…¹ company_Taxicab.Insu…² company_other local_no dow_Mon dow_Tue dow_Wed dow_Thu dow_Fri dow_Sat\n#>       <dbl>  <dbl> <fct>                <dbl>             <dbl>            <dbl>                     <dbl>                  <dbl>         <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n#>  1    1.38   0.418 yes                 -0.366            -0.333           -0.403                    -0.450                 -0.379        -0.609    0.484  -0.396  -0.441  -0.461   2.01   -0.428  -0.317\n#>  2   -0.729 -1.42  yes                  2.73             -0.333           -0.403                    -0.450                 -0.379        -0.609   -2.07   -0.396  -0.441  -0.461   2.01   -0.428  -0.317\n#>  3    1.42   0.877 yes                 -0.366            -0.333           -0.403                    -0.450                 -0.379         1.64     0.484   2.53   -0.441  -0.461  -0.497  -0.428  -0.317\n#>  4    1.11   1.57  yes                 -0.366            -0.333           -0.403                    -0.450                 -0.379        -0.609    0.484  -0.396  -0.441  -0.461  -0.497  -0.428  -0.317\n#>  5   -0.694  2.03  yes                 -0.366            -0.333            2.48                     -0.450                 -0.379        -0.609   -2.07   -0.396  -0.441  -0.461  -0.497  -0.428   3.15 \n#>  6    1.39  -0.502 yes                 -0.366             3.01            -0.403                    -0.450                 -0.379        -0.609    0.484  -0.396  -0.441  -0.461  -0.497   2.34   -0.317\n#>  7    1.40  -1.88  yes                 -0.366            -0.333           -0.403                    -0.450                 -0.379         1.64     0.484  -0.396  -0.441  -0.461  -0.497  -0.428  -0.317\n#>  8   -0.289 -0.502 yes                 -0.366            -0.333           -0.403                    -0.450                  2.64         -0.609    0.484  -0.396  -0.441  -0.461  -0.497   2.34   -0.317\n#>  9   -0.971  0.877 yes                 -0.366            -0.333            2.48                     -0.450                 -0.379        -0.609    0.484  -0.396   2.27   -0.461  -0.497  -0.428  -0.317\n#> 10    0.631 -0.732 yes                 -0.366            -0.333           -0.403                    -0.450                  2.64         -0.609    0.484  -0.396  -0.441  -0.461  -0.497  -0.428  -0.317\n#> # ℹ 7,990 more rows\n#> # ℹ abbreviated names: ¹​company_Taxi.Affiliation.Services, ²​company_Taxicab.Insurance.Agency.Llc\n#> # ℹ 3 more variables: month_Feb <dbl>, month_Mar <dbl>, month_Apr <dbl>\n```\n:::\n\n\n## Tidying a recipe\n\nOnce a recipe as been estimated, there are various bits of information saved in it.\n\n- The `tidy()` function can be used to get specific results from the recipe.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Take a prepped recipe and use the `tidy()` function on it.*\n\n*Use the `number` argument to inspect different steps.*\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"recipes-tidy\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Tidying a recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep(taxi_rec) %>%\n  tidy()\n#> # A tibble: 5 × 6\n#>   number operation type      trained skip  id             \n#>    <int> <chr>     <chr>     <lgl>   <lgl> <chr>          \n#> 1      1 step      unknown   TRUE    FALSE unknown_NTmu5  \n#> 2      2 step      dummy     TRUE    FALSE dummy_cT3Uy    \n#> 3      3 step      zv        TRUE    FALSE zv_z22dk       \n#> 4      4 step      log       TRUE    FALSE log_QQ1iw      \n#> 5      5 step      normalize TRUE    FALSE normalize_3cTJb\n```\n:::\n\n\n## Tidying a recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep(taxi_rec) %>%\n  tidy(number = 2)\n#> # A tibble: 20 × 3\n#>    terms   columns                      id         \n#>    <chr>   <chr>                        <chr>      \n#>  1 company City Service                 dummy_cT3Uy\n#>  2 company Flash Cab                    dummy_cT3Uy\n#>  3 company Sun Taxi                     dummy_cT3Uy\n#>  4 company Taxi Affiliation Services    dummy_cT3Uy\n#>  5 company Taxicab Insurance Agency Llc dummy_cT3Uy\n#>  6 company other                        dummy_cT3Uy\n#>  7 company unknown                      dummy_cT3Uy\n#>  8 local   no                           dummy_cT3Uy\n#>  9 local   unknown                      dummy_cT3Uy\n#> 10 dow     Mon                          dummy_cT3Uy\n#> 11 dow     Tue                          dummy_cT3Uy\n#> 12 dow     Wed                          dummy_cT3Uy\n#> 13 dow     Thu                          dummy_cT3Uy\n#> 14 dow     Fri                          dummy_cT3Uy\n#> 15 dow     Sat                          dummy_cT3Uy\n#> 16 dow     unknown                      dummy_cT3Uy\n#> 17 month   Feb                          dummy_cT3Uy\n#> 18 month   Mar                          dummy_cT3Uy\n#> 19 month   Apr                          dummy_cT3Uy\n#> 20 month   unknown                      dummy_cT3Uy\n```\n:::\n\n\n\n## Using a recipe in tidymodels\n\nThe recommended way to use a recipe in tidymodels is to use it as part of a `workflow()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_wflow <- workflow() %>%  \n  add_recipe(taxi_rec) %>%  \n  add_model(linear_reg())\n```\n:::\n\n\nWhen used in this way, you don't need to worry about `prep()` and `bake()` as it is handled for you.\n\n## More information\n\n- <https://recipes.tidymodels.org/>\n- <https://www.tmwr.org/recipes.html>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}