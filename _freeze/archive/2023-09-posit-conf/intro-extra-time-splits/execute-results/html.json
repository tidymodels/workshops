{
  "hash": "c1d15027e2e3438d960d253077517553",
  "result": {
    "markdown": "---\ntitle: \"Extras - Time-based data splitting\"\nsubtitle: \"Introduction to tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n## The raw taxi data set\n\nWe prepared the data set specifically for this introductory workshop. \n\nIt looked similar to this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(taxi_raw)\n#> Rows: 10,000\n#> Columns: 24\n#> $ trip_id                    <chr> \"3ac8d4412642a35e9b9a493285814d7983d5a159\",…\n#> $ taxi_id                    <chr> \"391317d70c5d06deec744062c4595dc1958b200fda…\n#> $ trip_start_timestamp       <dttm> 2023-06-10 18:45:00, 2023-05-21 21:30:00, …\n#> $ trip_end_timestamp         <dttm> 2023-06-10 19:30:00, 2023-05-21 21:45:00, …\n#> $ trip_seconds               <dbl> 3258, 839, 476, 2220, 1588, 2270, 1575, 267…\n#> $ trip_miles                 <dbl> 17.02, 2.16, 1.05, 17.40, 17.62, 16.36, 18.…\n#> $ pickup_census_tract        <dbl> 17031980000, 17031839100, 17031320100, 1703…\n#> $ dropoff_census_tract       <dbl> 17031081403, 17031081300, 17031081403, 1703…\n#> $ pickup_community_area      <dbl> 76, 32, 32, 76, 32, 76, 76, 32, 32, 33, 8, …\n#> $ dropoff_community_area     <dbl> 8, 8, 8, 32, 76, 8, 32, 76, 28, 32, 7, 33, …\n#> $ fare                       <dbl> 44.50, 10.00, 6.75, 45.00, 44.25, 41.25, 44…\n#> $ tips                       <dbl> 12.25, 4.00, 2.00, 9.90, 8.00, 9.15, 12.31,…\n#> $ tolls                      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ extras                     <dbl> 4.0, 1.0, 0.0, 4.0, 2.0, 4.0, 4.0, 0.0, 0.0…\n#> $ trip_total                 <dbl> 61.25, 15.50, 9.25, 58.90, 54.75, 54.90, 61…\n#> $ payment_type               <chr> \"Credit Card\", \"Credit Card\", \"Credit Card\"…\n#> $ company                    <chr> \"Taxicab Insurance Agency Llc\", \"Chicago In…\n#> $ pickup_centroid_latitude   <dbl> 41.97907, 41.88099, 41.88499, 41.97907, 41.…\n#> $ pickup_centroid_longitude  <dbl> -87.90304, -87.63275, -87.62099, -87.90304,…\n#> $ pickup_centroid_location   <chr> \"POINT (-87.9030396611 41.9790708201)\", \"PO…\n#> $ dropoff_centroid_latitude  <dbl> 41.89092, 41.89833, 41.89092, 41.87102, 41.…\n#> $ dropoff_centroid_longitude <dbl> -87.61887, -87.62076, -87.61887, -87.63141,…\n#> $ dropoff_centroid_location  <chr> \"POINT (-87.6188683546 41.8909220259)\", \"PO…\n#> $ tip                        <fct> yes, yes, yes, yes, yes, yes, yes, yes, yes…\n```\n:::\n\n\n:::notes\n`trip_start_time` has date and time rounded to \"quarters of the hour\".\n::::\n\n\n## Time nature of the data\n\nWe assumed only the month, day of the week, and hour mattered and treated each observation as independent.\n\n. . . \n\nIf the data have a strong time component, all your data splitting strategies should support the model in estimating temporal trends.\n\n. . .\n\nThus, don't sample randomly because this breaks up the time component!\n\n\n## Splitting with time component ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nThe more recent observations are assumed to be more similar to new data, so `initial_time_split()` puts them into the test set. \n\nThe function assumes that the data are already ordered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_raw <- taxi_raw %>%\n  arrange(trip_start_timestamp)\n\ntaxi_split <- initial_time_split(taxi_raw, prop = 3 / 4)\ntaxi_split\n#> <Training/Testing/Total>\n#> <7500/2500/10000>\n\ntaxi_train <- training(taxi_split)\ntaxi_test  <- testing(taxi_split)\n\nnrow(taxi_train)\n#> [1] 7500\n \nnrow(taxi_test)\n#> [1] 2500\n```\n:::\n\n\n## Time series resampling \n\nThe same idea also applies to resampling: the newer observations go into the assessment set.\n\nFor example:\n\n* Fold 1: Take the first X weeks of data as the analysis set, and the next 3 weeks as the assessment set.\n\n* Fold 2: Take weeks 2 to X + 1 as the analysis set, and the next 3 weeks as the assessment set.\n\n* and so on\n\n## Rolling origin forecast resampling \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/rolling.svg){fig-align='center' width=70%}\n:::\n:::\n\n\n:::notes\nThis image shows overlapping assessment sets. We will use non-overlapping data but it could be done either way.\n:::\n\n## Times series resampling  ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ntaxi_rs <-\n  taxi_train %>%\n  sliding_period(\n    index = \"trip_start_timestamp\",  \n\n\n\n\n  )\n```\n:::\n\n\nUse the `trip_start_timestamp` column to find the date data. \n\n## Times series resampling  ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\ntaxi_rs <-\n  taxi_train %>%\n  sliding_period(\n    index = \"trip_start_timestamp\",  \n    period = \"week\",\n\n\n\n  )\n```\n:::\n\n\nOur units will be in weeks. \n\n## Times series resampling  ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\ntaxi_rs <-\n  taxi_train %>%\n  sliding_period(\n    index = \"trip_start_timestamp\",  \n    period = \"week\",\n    lookback = 8\n    \n    \n  )\n```\n:::\n\n\nEvery analysis set has 8 weeks of data.\n\n## Times series resampling  ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\ntaxi_rs <-\n  taxi_train %>%\n  sliding_period(\n    index = \"trip_start_timestamp\",  \n    period = \"week\",\n    lookback = 8,\n    assess_stop = 3,\n\n  )\n```\n:::\n\n\nEvery assessment set has 3 weeks of data.\n\n## Times series resampling  ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\ntaxi_rs <-\n  taxi_train %>%\n  sliding_period(\n    index = \"trip_start_timestamp\",  \n    period = \"week\",\n    lookback = 8,\n    assess_stop = 3,\n    step = 1\n  )\n```\n:::\n\n\nIncrement by 1 week\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_rs$splits[[1]] %>% assessment() %>% pluck(\"trip_start_timestamp\") %>% range()\n#> [1] \"2023-03-02 05:15:00 UTC\" \"2023-03-22 22:00:00 UTC\"\n\ntaxi_rs$splits[[2]] %>% assessment() %>% pluck(\"trip_start_timestamp\") %>% range()\n#> [1] \"2023-03-09 07:00:00 UTC\" \"2023-03-29 21:15:00 UTC\"\n\ntaxi_rs$splits[[3]] %>% assessment() %>% pluck(\"trip_start_timestamp\") %>% range()\n#> [1] \"2023-03-16 06:30:00 UTC\" \"2023-04-05 23:45:00 UTC\"\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}