{
  "hash": "bffcf85cac804ec6fc344320e6566d1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2 - Your data budget\"\nsubtitle: \"Introduction to tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n\n##  {background-image=\"https://media.giphy.com/media/Lr3UeH9tYu3qJtsSUg/giphy.gif\" background-size=\"40%\"}\n\n\n## Data on forests in Washington\n\n::: columns\n::: {.column width=\"60%\"}\n-   The U.S. Forest Service maintains ML models to predict whether a plot of land is \"forested.\"\n-   This classification is important for all sorts of research, legislation, and land management purposes.\n-  Plots are typically remeasured every 10 years and this dataset contains the most recent measurement per plot.\n-   Type `?forested` to learn more about this dataset, including references.\n:::\n\n::: {.column width=\"40%\"}\n![](images/forest_mountain.svg)\n:::\n\n:::\n\n::: footer\nCredit: <https://www.svgrepo.com/svg/251793/forest-mountain>\n:::\n\n## Data on forests in Washington\n\n::: columns\n::: {.column width=\"70%\"}\n-   `N = 7,107` plots of land, one from each of 7,107 6000-acre hexagons in WA.\n-   A nominal outcome, `forested`, with levels `\"Yes\"` and `\"No\"`, measured \"on-the-ground.\"\n-   18 remotely-sensed and easily-accessible predictors:\n     - **numeric** variables based on weather and topography.\n     - **nominal** variables based on classifications from other governmental orgs.\n:::\n\n::: {.column width=\"30%\"}\n![](images/forest.svg)\n:::\n:::\n\n::: footer\nCredit: <https://www.svgrepo.com/svg/67614/forest>\n:::\n\n:::notes\n- Those nominal variables are classifications similar to \"forested\" but from other agencies. e.g. `land_type` is from the European Space Agency, and is a remotely-sensed 3-class distribution based on predictions for how the land is used.\n:::\n\n## Checklist for predictors\n\n- Is it ethical to use this variable? (Or even legal?)\n\n- Will this variable be available at prediction time?\n\n- Does this variable contribute to explainability?\n\n:::notes\n- re: ethics -- what issues might arise from releasing the true `lat` and `lon`? In reality, these `lat` and `lon` are slightly jittered to help ensure trust with landowners who allow surveyers to come take measurements.\n:::\n\n## Data on forests in Washington\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(forested)\n\nforested\n#> # A tibble: 7,107 √ó 19\n#>    forested  year elevation eastness northness roughness tree_no_tree dew_temp\n#>    <fct>    <dbl>     <dbl>    <dbl>     <dbl>     <dbl> <fct>           <dbl>\n#>  1 Yes       2005       881       90        43        63 Tree             0.04\n#>  2 Yes       2005       113      -25        96        30 Tree             6.4 \n#>  3 No        2005       164      -84        53        13 Tree             6.06\n#>  4 Yes       2005       299       93        34         6 No tree          4.43\n#>  5 Yes       2005       806       47       -88        35 Tree             1.06\n#>  6 Yes       2005       736      -27       -96        53 Tree             1.35\n#>  7 Yes       2005       636      -48        87         3 No tree          1.42\n#>  8 Yes       2005       224      -65       -75         9 Tree             6.39\n#>  9 Yes       2005        52      -62        78        42 Tree             6.5 \n#> 10 Yes       2005      2240      -67       -74        99 No tree         -5.63\n#> # ‚Ñπ 7,097 more rows\n#> # ‚Ñπ 11 more variables: precip_annual <dbl>, temp_annual_mean <dbl>,\n#> #   temp_annual_min <dbl>, temp_annual_max <dbl>, temp_january_min <dbl>,\n#> #   vapor_min <dbl>, vapor_max <dbl>, canopy_cover <dbl>, lon <dbl>, lat <dbl>,\n#> #   land_type <fct>\n```\n:::\n\n\n\n\n## Data splitting and spending {.annotation}\n\nFor machine learning, we typically split data into training and test sets:\n\n. . .\n\n-   The **training set** is used to estimate model parameters.\n-   The **test set** is used to find an independent assessment of model performance.\n\n. . .\n\nDo not üö´ use the test set during training.\n\n## Data splitting and spending\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/test-train-split-1.svg)\n:::\n:::\n\n\n\n# The more data<br>we spend ü§ë<br><br>the better estimates<br>we'll get.\n\n## Data splitting and spending\n\n-   Spending too much data in **training** prevents us from computing a good assessment of predictive **performance**.\n\n. . .\n\n-   Spending too much data in **testing** prevents us from computing a good estimate of model **parameters**.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*When is a good time to split your data?*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"when-to-split\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# The testing data is precious üíé\n\n## The initial split ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nforested_split <- initial_split(forested)\nforested_split\n#> <Training/Testing/Total>\n#> <5330/1777/7107>\n```\n:::\n\n\n\n:::notes\nHow much data in training vs testing?\nThis function uses a good default, but this depends on your specific goal/data\n:::\n\n## What is `set.seed()`? {.annotation}\n\nTo create that split of the data, R generates \"pseudo-random\" numbers: while they are made to behave like random numbers, their generation is deterministic given a \"seed\".\n\nThis allows us to reproduce results by setting that seed.\n\nWhich seed you pick doesn't matter, as long as you don't try a bunch of seeds and pick the one that gives you the best performance.\n\n## Accessing the data ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforested_train <- training(forested_split)\nforested_test <- testing(forested_split)\n```\n:::\n\n\n\n## The training set![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforested_train\n#> # A tibble: 5,330 √ó 19\n#>    forested  year elevation eastness northness roughness tree_no_tree dew_temp\n#>    <fct>    <dbl>     <dbl>    <dbl>     <dbl>     <dbl> <fct>           <dbl>\n#>  1 No        2016       464       -5       -99         7 No tree          1.71\n#>  2 Yes       2016       166       92        37         7 Tree             6   \n#>  3 No        2016       644      -85       -52        24 No tree          0.67\n#>  4 Yes       2014      1285        4        99        79 Tree             1.91\n#>  5 Yes       2013       822       87        48        68 Tree             1.95\n#>  6 Yes       2017         3        6       -99         5 Tree             7.93\n#>  7 Yes       2014      2041      -95        28        49 Tree            -4.22\n#>  8 Yes       2015      1009       -8        99        72 Tree             1.72\n#>  9 No        2017       436      -98        19        10 No tree          1.8 \n#> 10 No        2018       775       63        76       103 No tree          0.62\n#> # ‚Ñπ 5,320 more rows\n#> # ‚Ñπ 11 more variables: precip_annual <dbl>, temp_annual_mean <dbl>,\n#> #   temp_annual_min <dbl>, temp_annual_max <dbl>, temp_january_min <dbl>,\n#> #   vapor_min <dbl>, vapor_max <dbl>, canopy_cover <dbl>, lon <dbl>, lat <dbl>,\n#> #   land_type <fct>\n```\n:::\n\n\n\n## The test set ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nüôà\n\n. . .\n\nThere are 1777 rows and 19 columns in the test set.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Split your data so 20% is held out for the test set.*\n\n*Try out different values in `set.seed()` to see how the results change.*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"try-splitting\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Data splitting and spending ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nforested_split <- initial_split(forested, prop = 0.8)\nforested_train <- training(forested_split)\nforested_test <- testing(forested_split)\n\nnrow(forested_train)\n#> [1] 5685\nnrow(forested_test)\n#> [1] 1422\n```\n:::\n\n\n\n# Exploratory data analysis for ML üßê\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Explore the `forested_train` data on your own!*\n\n* *What's the distribution of the outcome, `forested`?*\n* *What's the distribution of numeric variables like `precip_annual`?*\n* *How does the distribution of `forested` differ across the categorical variables?*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"explore-forested\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: notes\nMake a plot or summary and then share with neighbor\n:::\n\n## \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nforested_train %>% \n  ggplot(aes(x = forested)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](figures/forested-forested-counts-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nforested_train %>% \n  ggplot(aes(x = forested, fill = tree_no_tree)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](figures/forested-by-tree-no-tree-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nforested_train %>% \n  ggplot(aes(x = precip_annual, fill = forested, group = forested)) +\n  geom_histogram(position = \"identity\", alpha = .7)\n```\n\n::: {.cell-output-display}\n![](figures/forested-by-precip-annual-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nforested_train %>% \n  ggplot(aes(x = precip_annual, fill = forested, group = forested)) +\n  geom_histogram(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](figures/forested-by-precip-annual-fill-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nforested_train %>% \n  ggplot(aes(x = lon, y = lat, col = forested)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](figures/forested-forested-by-lat-lon-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## The whole game - status update\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/whole-game-transparent-split.jpg){fig-align='center'}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}