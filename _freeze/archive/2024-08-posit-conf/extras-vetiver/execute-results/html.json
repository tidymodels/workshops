{
  "hash": "6a52cd64c81378a896eb4a9cf8bf37fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Extras - Model deployment\"\nsubtitle: \"Advanced tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n\n# Deploy your model ![](hexes/vetiver.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n## {background-image=\"https://vetiver.rstudio.com/images/ml_ops_cycle.png\" background-size=\"contain\"}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Deploying a model ![](hexes/vetiver.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nWe have a decision tree, `tree_fit`, to model whether or not a plot of land in Washington is forested or not.\n\nHow do we use our model in **production**?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vetiver)\nv <- vetiver_model(tree_fit, \"forested\")\nv\n#> \n#> ── forested ─ <bundled_workflow> model for deployment \n#> A rpart classification modeling workflow using 18 features\n```\n:::\n\n\n\nLearn more at <https://vetiver.rstudio.com>\n\n## Deploy your model ![](hexes/vetiver.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nHow do we use our model in **production**?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plumber)\npr() %>%\n  vetiver_api(v)\n#> # Plumber router with 4 endpoints, 4 filters, and 1 sub-router.\n#> # Use `pr_run()` on this object to start the API.\n#> ├──[queryString]\n#> ├──[body]\n#> ├──[cookieParser]\n#> ├──[sharedSecret]\n#> ├──/logo\n#> │  │ # Plumber static router serving from directory: /Users/simoncouch/Library/R/arm64/4.4/library/vetiver\n#> ├──/metadata (GET)\n#> ├──/ping (GET)\n#> ├──/predict (POST)\n#> └──/prototype (GET)\n```\n:::\n\n\n\nLearn more at <https://vetiver.rstudio.com>\n\n:::notes\nLive-code making a prediction\n:::\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Run the `vetiver` chunk in your `.qmd`.*\n\n*Check out the automated visual documentation.*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"vetiver\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}