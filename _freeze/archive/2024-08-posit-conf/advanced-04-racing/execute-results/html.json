{
  "hash": "845fa6941f16f89cb0ec51364a9f4497",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4 - Grid Search via Racing\"\nsubtitle: \"Advanced tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n\n\n\n## Previously - Setup ![](hexes/tidymodels.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(textrecipes)\nlibrary(bonsai)\n\n# Max's usual settings: \ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(\n  pillar.advice = FALSE, \n  pillar.min_title_chars = Inf\n)\n\nreg_metrics <- metric_set(mae, rsq)\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(hotel_rates)\nset.seed(295)\nhotel_rates <- \n  hotel_rates %>% \n  sample_n(5000) %>% \n  arrange(arrival_date) %>% \n  select(-arrival_date) %>% \n  mutate(\n    company = factor(as.character(company)),\n    country = factor(as.character(country)),\n    agent = factor(as.character(agent))\n  )\n```\n:::\n\n\n\n\n:::\n\n::::\n\n\n## Previously - Data Usage ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(4028)\nhotel_split <-\n  initial_split(hotel_rates, strata = avg_price_per_room)\n\nhotel_train <- training(hotel_split)\nhotel_test <- testing(hotel_split)\n\nset.seed(472)\nhotel_rs <- vfold_cv(hotel_train, strata = avg_price_per_room)\n```\n:::\n\n\n\n## Previously - Boosting Model ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/textrecipes.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"} ![](hexes/recipes.png){.absolute top=-20 right=128 width=\"64\" height=\"74.24\"} ![](hexes/bonsai.png){.absolute top=-20 right=192 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_rec <-\n  recipe(avg_price_per_room ~ ., data = hotel_train) %>%\n  step_YeoJohnson(lead_time) %>%\n  step_dummy_hash(agent,   num_terms = tune(\"agent hash\")) %>%\n  step_dummy_hash(company, num_terms = tune(\"company hash\")) %>%\n  step_zv(all_predictors())\n\nlgbm_spec <- \n  boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"lightgbm\", num_threads = 1)\n\nlgbm_wflow <- workflow(hotel_rec, lgbm_spec)\n\nlgbm_param <-\n  lgbm_wflow %>%\n  extract_parameter_set_dials() %>%\n  update(`agent hash`   = num_hash(c(3, 8)),\n         `company hash` = num_hash(c(3, 8)))\n```\n:::\n\n\n\n\n## First, a shameless promotion\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/finetune-toot.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n## Making Grid Search More Efficient\n\n\nIn the last section, we evaluated 250 models (25 candidates times 10 resamples).\n\nWe can make this go faster using parallel processing. \n\nAlso, for some models, we can _fit_ far fewer models than the number that are being evaluated. \n \n * For boosting, a model with `X` trees can often predict on candidates with less than `X` trees. \n \nBoth of these methods can lead to enormous speed-ups. \n\n## Model Racing \n\n[_Racing_](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C7&q=+Hoeffding+racing) is an old tool that we can use to go even faster. \n\n1. Evaluate all of the candidate models but only for a few resamples. \n1. Determine which candidates have a low probability of being selected.\n1. Eliminate poor candidates.\n1. Repeat with next resample (until no more resamples remain) \n\nThis can result in fitting a small number of models. \n\n\n## Discarding Candidates\n\nHow do we eliminate tuning parameter combinations? \n\nThere are a few methods to do so. We'll use one based on analysis of variance (ANOVA). \n\n_However_... there is typically a large difference between resamples in the results. \n\n## Resampling Results (Non-Racing)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\nHere are some realistic (but simulated) examples of two candidate models. \n\nAn error estimate is measured for each of 10 resamples. \n\n - The lines connect resamples. \n\nThere is usually a significant resample-to-resample effect (rank corr: 0.83). \n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/race-data-1.svg){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Are Candidates Different?\n\nOne way to evaluate these models is to do a paired t-test\n \n - or a t-test on their differences matched by resamples\n\nWith $n = 10$ resamples, the confidence interval for the difference in RMSE is (0.99, 2.8), indicating that candidate number 2 has smaller error. \n\n\n\n## Evaluating Differences in Candidates\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\nWhat if we were to have compared the candidates while we seqeuntially evaluated each resample? \n\nðŸ‘‰\n\n<be>\n\nOne candidate shows superiority when 4 resamples have been evaluated.\n\n:::\n\n::: {.column width=\"60%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/race-ci-1.svg){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n::::\n\n\n## Interim Analysis of Results\n\nOne version of racing uses a _mixed model ANOVA_ to construct one-sided confidence intervals for each candidate versus the current best. \n\nAny candidates whose bound does not include zero are discarded.  [Here](https://www.tmwr.org/race_results.mp4) is an animation.\n\nThe resamples are analyzed in a random order (so set the seed).\n\n<br>\n\n[Kuhn (2014)](https://arxiv.org/abs/1405.6974) has examples and simulations to show that the method works. \n\nThe [finetune](https://finetune.tidymodels.org/) package has functions `tune_race_anova()` and `tune_race_win_loss()`. \n\n\n## Racing ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/textrecipes.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"} ![](hexes/recipes.png){.absolute top=-20 right=128 width=\"64\" height=\"74.24\"} ![](hexes/finetune.png){.absolute top=-20 right=192 width=\"64\" height=\"74.24\"} ![](hexes/bonsai.png){.absolute top=-20 right=256 width=\"64\" height=\"74.24\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12|\"}\n# Let's use a larger grid\nset.seed(8945)\nlgbm_grid <- \n  lgbm_param %>% \n  grid_space_filling(size = 50)\n\nlibrary(finetune)\n\nset.seed(9)\nlgbm_race_res <-\n  lgbm_wflow %>%\n  tune_race_anova(\n    resamples = hotel_rs,\n    grid = lgbm_grid, \n    metrics = reg_metrics\n  )\n```\n:::\n\n\n\nThe syntax and helper functions are extremely similar to those shown for `tune_grid()`. \n\n\n## Racing Results ![](hexes/tune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(lgbm_race_res, metric = \"mae\")\n#> # A tibble: 2 Ã— 11\n#>   trees min_n learn_rate `agent hash` `company hash` .metric .estimator  mean     n std_err .config              \n#>   <int> <int>      <dbl>        <int>          <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                \n#> 1  1347     5     0.0655           66             26 mae     standard    9.64    10   0.173 Preprocessor34_Model1\n#> 2   980     8     0.0429           17            135 mae     standard    9.76    10   0.164 Preprocessor25_Model1\n```\n:::\n\n\n\n## Racing Results ![](hexes/finetune.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nOnly 171 models were fit (out of 500). \n\n`select_best()` never considers candidate models that did not get to the end of the race. \n\nThere is a helper function to see how candidate models were removed from consideration. \n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot_race(lgbm_race_res) + \n  scale_x_continuous(breaks = pretty_breaks())\n```\n\n::: {.cell-output-display}\n![](figures/plot-race-1.svg){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Your turn {transition=\"slide-in\"}\n\n- *Run `tune_race_anova()` with a different seed.*\n- *Did you get the same or similar results?*\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"racing-repeat\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}