{
  "hash": "9d988c8ca3511622466cec50cb1ef7f9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"5 - Tuning models\"\nsubtitle: \"Introduction to tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Tuning parameters\n\nSome model or preprocessing parameters cannot be estimated directly from the data.\n\n. . .\n\nSome examples:\n\n- Tree depth in decision trees\n- Number of neighbors in a K-nearest neighbor model\n\n## Optimize tuning parameters\n\n- Try different values and measure their performance.\n\n. . .\n\n- Find good values for these parameters.\n\n. . .\n\n- Once the value(s) of the parameter(s) are determined, a model can be finalized by fitting the model to the entire training set.\n\n## Optimize tuning parameters\n\nThe main two strategies for optimization are:\n\n. . .\n\n-   **Grid search** 💠 which tests a pre-defined set of candidate values\n\n-   **Iterative search** 🌀 which suggests/estimates new values of candidate parameters to evaluate\n\n## Specifying tuning parameters\n\nLet's take our previous random forest workflow and tag for tuning the minimum number of data points in each node:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|\"}\nrf_spec <- rand_forest(min_n = tune()) %>% \n  set_mode(\"classification\")\n\nrf_wflow <- workflow(forested ~ ., rf_spec)\nrf_wflow\n#> ══ Workflow ══════════════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: rand_forest()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> forested ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> Random Forest Model Specification (classification)\n#> \n#> Main Arguments:\n#>   min_n = tune()\n#> \n#> Computational engine: ranger\n```\n:::\n\n\n\n## Try out multiple values\n\n`tune_grid()` works similar to `fit_resamples()` but covers multiple parameter values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2|3-4|5|\"}\nset.seed(22)\nrf_res <- tune_grid(\n  rf_wflow,\n  forested_folds,\n  grid = 5\n)\n```\n:::\n\n\n\n## Compare results\n\nInspecting results and selecting the best-performing hyperparameter(s):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(rf_res)\n#> # A tibble: 5 × 7\n#>   min_n .metric .estimator  mean     n std_err .config             \n#>   <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n#> 1    21 roc_auc binary     0.972    10 0.00295 Preprocessor1_Model4\n#> 2     6 roc_auc binary     0.972    10 0.00303 Preprocessor1_Model2\n#> 3    31 roc_auc binary     0.972    10 0.00317 Preprocessor1_Model3\n#> 4    13 roc_auc binary     0.972    10 0.00311 Preprocessor1_Model5\n#> 5    33 roc_auc binary     0.972    10 0.00322 Preprocessor1_Model1\n\nbest_parameter <- select_best(rf_res)\nbest_parameter\n#> # A tibble: 1 × 2\n#>   min_n .config             \n#>   <int> <chr>               \n#> 1    21 Preprocessor1_Model4\n```\n:::\n\n\n\n`collect_metrics()` and `autoplot()` are also available.\n\n## The final fit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_wflow <- finalize_workflow(rf_wflow, best_parameter)\n\nfinal_fit <- last_fit(rf_wflow, forested_split) \n\ncollect_metrics(final_fit)\n#> # A tibble: 3 × 4\n#>   .metric     .estimator .estimate .config             \n#>   <chr>       <chr>          <dbl> <chr>               \n#> 1 accuracy    binary        0.906  Preprocessor1_Model1\n#> 2 roc_auc     binary        0.970  Preprocessor1_Model1\n#> 3 brier_class binary        0.0656 Preprocessor1_Model1\n```\n:::\n\n\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Modify your model workflow to tune one or more parameters.*\n\n*Use grid search to find the best parameter(s).*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"tune-grid\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}