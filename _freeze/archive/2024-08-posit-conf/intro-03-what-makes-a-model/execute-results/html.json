{
  "hash": "5b09f1f03d139a8e85c0d78d7040c5c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3 - What makes a model?\"\nsubtitle: \"Introduction to tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*How do you fit a linear model in R?*\n\n*How many different ways can you think of?*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"how-to-fit-linear-model\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n. . .\n\n-   `lm` for linear model\n\n-   `glmnet` for regularized regression\n\n-   `keras` for regression using TensorFlow\n\n-   `stan` for Bayesian regression\n\n-   `spark` for large data sets\n\n-   `brulee` for regression using torch\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n. . .\n\n::: columns\n::: {.column width=\"60%\"}\n-   Choose a [model]{.underline}\n-   Specify an engine\n-   Set the mode\n:::\n\n::: {.column width=\"40%\"}\n<br><br><br>\n![](images/forest_mountain.svg){.absolute height=\"300\"}\n:::\n:::\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg()\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n```\n:::\n\n\n\n\n:::notes\nModels have default engines\n:::\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"60%\"}\n-   Choose a model\n-   Specify an [engine]{.underline}\n-   Set the mode\n:::\n\n::: {.column width=\"40%\"}\n<br><br><br>\n![](images/forest_mountain.svg){.absolute height=\"300\"}\n:::\n:::\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg() %>%\n  set_engine(\"glmnet\")\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glmnet\n```\n:::\n\n\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_reg() %>%\n  set_engine(\"stan\")\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: stan\n```\n:::\n\n\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"60%\"}\n-   Choose a model\n-   Specify an engine\n-   Set the [mode]{.underline}\n:::\n\n::: {.column width=\"40%\"}\n<br><br><br>\n![](images/forest_mountain.svg){.absolute height=\"300\"}\n:::\n:::\n\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecision_tree()\n#> Decision Tree Model Specification (unknown mode)\n#> \n#> Computational engine: rpart\n```\n:::\n\n\n\n:::notes\nSome models have a default mode\n:::\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecision_tree() %>% \n  set_mode(\"classification\")\n#> Decision Tree Model Specification (classification)\n#> \n#> Computational engine: rpart\n```\n:::\n\n\n\n. . .\n\n<br></br>\n\n::: r-fit-text\nAll available models are listed at <https://www.tidymodels.org/find/parsnip/> \n:::\n\n##  {background-iframe=\"https://www.tidymodels.org/find/parsnip/\"}\n\n::: footer\n:::\n\n## To specify a model ![](hexes/parsnip.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n::: columns\n::: {.column width=\"60%\"}\n-   Choose a [model]{.underline}\n-   Specify an [engine]{.underline}\n-   Set the [mode]{.underline}\n:::\n\n::: {.column width=\"40%\"}\n<br><br><br>\n![](images/forest_mountain.svg){.absolute height=\"300\"}\n:::\n:::\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Run the `tree_spec` chunk in your `.qmd`.*\n\n*Edit this code to use a logistic regression model.*<br></br>\n\n::: r-fit-text\nAll available models are listed at <https://www.tidymodels.org/find/parsnip/>\n:::\n\n<br></br>\n\n*Extension/Challenge: Edit this code to use a different model. For example, try using a conditional inference tree as implemented in the partykit package by changing the engine - or try an entirely different model type!*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"explore-tree-spec\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## Models we'll be using today\n\n* Logistic regression\n* Decision trees\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Logistic regression\n\n::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-rates-1.svg)\n:::\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n:::\n:::\n\n## Logistic regression\n\n::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-logistic-reg-1.svg)\n:::\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n:::\n:::\n\n## Logistic regression\n\n::: columns\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-logistic-reg-2-1.svg)\n:::\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n-   Logit of outcome probability modeled as linear combination of predictors:\n\n$log(\\frac{p}{1 - p}) = \\beta_0 + \\beta_1\\cdot \\text{A}$\n\n-   Find a sigmoid line that separates the two classes\n\n:::\n:::\n\n## Decision trees\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n:::\n:::\n\n## Decision trees\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-2-1.svg){fig-align='center'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n-   Series of splits or if/then statements based on predictors\n\n-   First the tree *grows* until some condition is met (maximum depth, no more data)\n\n-   Then the tree is *pruned* to reduce its complexity\n:::\n:::\n\n## Decision trees\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-3-1.svg){fig-align='center'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-tree-preds-1.svg)\n:::\n:::\n\n\n:::\n:::\n\n## All models are wrong, but some are useful!\n\n::: columns\n::: {.column width=\"50%\"}\n### Logistic regression\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-logistic-reg-3-1.svg)\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n### Decision trees\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/plot-tree-preds-2-1.svg)\n:::\n:::\n\n\n:::\n:::\n\n# A model workflow\n\n## Workflows bind preprocessors and models\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/good_workflow.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n:::notes\nExplain that PCA that is a preprocessor / dimensionality reduction, used to decorrelate data\n:::\n\n\n## What is wrong with this? {.annotation}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/bad_workflow.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n## Why a `workflow()`? ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n. . .\n\n-   Workflows handle new data better than base R tools in terms of new factor levels\n\n. . .\n\n-   You can use other preprocessors besides formulas (more on feature engineering in Advanced tidymodels!)\n\n. . .\n\n-   They can help organize your work when working with multiple models\n\n. . .\n\n-   [Most importantly]{.underline}, a workflow captures the entire modeling process: `fit()` and `predict()` apply to the preprocessing steps in addition to the actual model fit\n\n::: notes\nTwo ways workflows handle levels better than base R:\n\n-   Enforces that new levels are not allowed at prediction time (this is an optional check that can be turned off)\n\n-   Restores missing levels that were present at fit time, but happen to be missing at prediction time (like, if your \"new\" data just doesn't have an instance of that level)\n:::\n\n## A model workflow ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n\ntree_spec %>% \n  fit(forested ~ ., data = forested_train) \n#> parsnip model object\n#> \n#> n= 5685 \n#> \n#> node), split, n, loss, yval, (yprob)\n#>       * denotes terminal node\n#> \n#>  1) root 5685 2550 Yes (0.55145119 0.44854881)  \n#>    2) land_type=Tree 3064  300 Yes (0.90208877 0.09791123) *\n#>    3) land_type=Barren,Non-tree vegetation 2621  371 No (0.14154903 0.85845097)  \n#>      6) temp_annual_max< 13.395 347  153 Yes (0.55907781 0.44092219)  \n#>       12) tree_no_tree=Tree 92    6 Yes (0.93478261 0.06521739) *\n#>       13) tree_no_tree=No tree 255  108 No (0.42352941 0.57647059) *\n#>      7) temp_annual_max>=13.395 2274  177 No (0.07783641 0.92216359) *\n```\n:::\n\n\n\n## A model workflow ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n\nworkflow() %>%\n  add_formula(forested ~ .) %>%\n  add_model(tree_spec) %>%\n  fit(data = forested_train) \n#> ══ Workflow [trained] ════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: decision_tree()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> forested ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> n= 5685 \n#> \n#> node), split, n, loss, yval, (yprob)\n#>       * denotes terminal node\n#> \n#>  1) root 5685 2550 Yes (0.55145119 0.44854881)  \n#>    2) land_type=Tree 3064  300 Yes (0.90208877 0.09791123) *\n#>    3) land_type=Barren,Non-tree vegetation 2621  371 No (0.14154903 0.85845097)  \n#>      6) temp_annual_max< 13.395 347  153 Yes (0.55907781 0.44092219)  \n#>       12) tree_no_tree=Tree 92    6 Yes (0.93478261 0.06521739) *\n#>       13) tree_no_tree=No tree 255  108 No (0.42352941 0.57647059) *\n#>      7) temp_annual_max>=13.395 2274  177 No (0.07783641 0.92216359) *\n```\n:::\n\n\n\n## A model workflow ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n\nworkflow(forested ~ ., tree_spec) %>% \n  fit(data = forested_train) \n#> ══ Workflow [trained] ════════════════════════════════════════════════\n#> Preprocessor: Formula\n#> Model: decision_tree()\n#> \n#> ── Preprocessor ──────────────────────────────────────────────────────\n#> forested ~ .\n#> \n#> ── Model ─────────────────────────────────────────────────────────────\n#> n= 5685 \n#> \n#> node), split, n, loss, yval, (yprob)\n#>       * denotes terminal node\n#> \n#>  1) root 5685 2550 Yes (0.55145119 0.44854881)  \n#>    2) land_type=Tree 3064  300 Yes (0.90208877 0.09791123) *\n#>    3) land_type=Barren,Non-tree vegetation 2621  371 No (0.14154903 0.85845097)  \n#>      6) temp_annual_max< 13.395 347  153 Yes (0.55907781 0.44092219)  \n#>       12) tree_no_tree=Tree 92    6 Yes (0.93478261 0.06521739) *\n#>       13) tree_no_tree=No tree 255  108 No (0.42352941 0.57647059) *\n#>      7) temp_annual_max>=13.395 2274  177 No (0.07783641 0.92216359) *\n```\n:::\n\n\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Run the `tree_wflow` chunk in your `.qmd`.*\n\n*Edit this code to make a workflow with your own model of choice.*\n\n<br></br>\n\n*Extension/Challenge: Other than formulas, what kinds of preprocessors are supported?*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"explore-tree-workflow\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Predict with your model ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\nHow do you use your new `tree_fit` model?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n\ntree_fit <-\n  workflow(forested ~ ., tree_spec) %>% \n  fit(data = forested_train) \n```\n:::\n\n\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Run:*\n\n`predict(tree_fit, new_data = forested_test)`\n\n*What do you notice about the structure of the result?*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"predict-tree-fit\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Your turn\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Run:*\n\n`augment(tree_fit, new_data = forested_test)`\n\n*How does the output compare to the output from `predict()`?*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"augment-tree-fit\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# The tidymodels prediction guarantee!\n\n. . .\n\n-   The predictions will always be inside a **tibble**\n-   The column names and types are **unsurprising** and **predictable**\n-   The number of rows in `new_data` and the output **are the same**\n\n## Understand your model ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\nHow do you **understand** your new `tree_fit` model?\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/plot-tree-fit-4-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Understand your model ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\nHow do you **understand** your new `tree_fit` model?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart.plot)\ntree_fit %>%\n  extract_fit_engine() %>%\n  rpart.plot(roundint = FALSE)\n```\n:::\n\n\n\nYou can `extract_*()` several components of your fitted workflow.\n\n. . .\n\n⚠️ *Never `predict()` with any extracted components!*\n\n::: notes\n`roundint = FALSE` is only to quiet a warning\n:::\n\n\n## Understand your model ![](hexes/workflows.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} ![](hexes/parsnip.png){.absolute top=-20 right=64 width=\"64\" height=\"74.24\"}\n\nHow do you **understand** your new `tree_fit` model?\n\n. . .\n\nYou can use your fitted workflow for model and/or prediction explanations:\n\n. . .\n\n-   overall variable importance, such as with the [vip](https://koalaverse.github.io/vip/) package\n\n. . .\n\n-   flexible model explainers, such as with the [DALEXtra](https://dalex.drwhy.ai/) package\n\n. . .\n\nLearn more at <https://www.tmwr.org/explain.html>\n\n##  {background-iframe=\"https://hardhat.tidymodels.org/reference/hardhat-extract.html\"}\n\n::: footer\n:::\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n<br>\n\n*Extract the model engine object from your fitted workflow and check it out.*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"extract-methods\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n:::notes\nAfterward, ask what kind of object people got from the extraction, and what they did with it (e.g. give it to `summary()`, `plot()`, `broom::tidy()` ). Live code along\n:::\n\n## The whole game - status update\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/whole-game-transparent-model-1.jpg){fig-align='center'}\n:::\n:::\n\n\n\n:::notes\nStress that fitting a model on the entire training set was only for illustrating how to fit a model\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}