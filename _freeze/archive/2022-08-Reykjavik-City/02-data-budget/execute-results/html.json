{
  "hash": "2b9567f1d01fef5e4e4fcac034c8e271",
  "result": {
    "markdown": "---\ntitle: \"2 - Your data budget\"\nsubtitle: \"Machine learning with tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n---\n\n\n\n\n##  {background-image=\"https://media.giphy.com/media/Lr3UeH9tYu3qJtsSUg/giphy.gif\" background-size=\"40%\"}\n\n## Data on tree frog hatching\n\n![](images/Hatching-process.jpg)\n\n## Data on tree frog hatching\n\n-   Red-eyed tree frog embryos can hatch earlier than their normal \\~7 days if they detect potential predator threat!\n-   Type `?stacks::tree_frogs` to learn more about this dataset, including references.\n-   We are using a slightly modified version from stacks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n\ndata(\"tree_frogs\", package = \"stacks\")\ntree_frogs <- tree_frogs %>%\n  mutate(t_o_d = factor(t_o_d),\n         age = age / 86400) %>%\n  filter(!is.na(latency)) %>%\n  select(-c(clutch, hatched))\n```\n:::\n\n\n## Data on tree frog hatching\n\n::: columns\n::: {.column width=\"60%\"}\n-   `N = 572`\n-   A numeric outcome, `latency`\n-   4 other variables\n    -   `treatment`, `reflex`, and `t_o_d` are **nominal** predictors\n    -   `age` is a **numeric** predictor\n:::\n\n::: {.column width=\"40%\"}\n![](images/Ac_2tads.jpg)\n:::\n:::\n\n:::notes\n- latency: How long it took the frog to hatch after being stimulated - i.e. after being poked by a blunt probe (in seconds).\n\n- treatment: Whether or not they got gentamicin, a compound that knocks out the embryo's lateral line (a sensory organ).\n\n- reflex: A measure of ear function (low, mid, full)\n\n- t_o_d: Time that the stimulus was applied (morning, afternoon, night)\n\n- age: Age at the time it was stimulated (in days)\n:::\n\n## Data on tree frog hatching\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_frogs\n#> # A tibble: 572 √ó 5\n#>    treatment  reflex   age t_o_d     latency\n#>    <fct>      <fct>  <dbl> <fct>       <dbl>\n#>  1 control    full    5.40 morning        22\n#>  2 control    low     4.18 night         360\n#>  3 control    full    4.65 afternoon     106\n#>  4 control    mid     4.14 night         180\n#>  5 control    full    4.6  afternoon      60\n#>  6 gentamicin full    5.36 morning        39\n#>  7 control    full    4.56 afternoon     214\n#>  8 control    full    5.43 morning        50\n#>  9 control    full    4.63 afternoon     224\n#> 10 control    full    5.40 morning        63\n#> # ‚Ñπ 562 more rows\n```\n:::\n\n\n\n## Data splitting and spending\n\nFor machine learning, we typically split data into training and test sets:\n\n. . .\n\n-   The **training set** is used to estimate model parameters.\n-   The **test set** is used to find an independent assessment of model performance.\n\n. . .\n\nDo not üö´ use the test set during training.\n\n## Data splitting and spending\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](02-data-budget_files/figure-revealjs/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\n# The more data<br>we spend ü§ë<br><br>the better estimates<br>we'll get.\n\n## Data splitting and spending\n\n-   Spending too much data in **training** prevents us from computing a good assessment of predictive **performance**.\n\n. . .\n\n-   Spending too much data in **testing** prevents us from computing a good estimate of model **parameters**.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*When is a good time to split your data?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"when-to-split\" style=\"right:0;bottom:0;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# The testing data is precious üíé\n\n## Data splitting and spending ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} {.annotation}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nfrog_split <- initial_split(tree_frogs)\nfrog_split\n#> <Training/Testing/Total>\n#> <429/143/572>\n```\n:::\n\n\n:::notes\nHow much data in training vs testing?\nThis function uses a good default, but this depends on your specific goal/data\nWe will talk about more powerful ways of splitting, like stratification, later\n:::\n\n## Accessing the data ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrog_train <- training(frog_split)\nfrog_test <- testing(frog_split)\n```\n:::\n\n\n## The training set![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrog_train\n#> # A tibble: 429 √ó 5\n#>    treatment  reflex   age t_o_d     latency\n#>    <fct>      <fct>  <dbl> <fct>       <dbl>\n#>  1 control    full    5.36 morning        36\n#>  2 gentamicin full    5.37 morning        72\n#>  3 gentamicin full    4.65 afternoon     141\n#>  4 control    full    5.42 morning        27\n#>  5 control    full    5.43 morning        27\n#>  6 gentamicin full    5.38 morning        73\n#>  7 gentamicin full    5.42 morning        68\n#>  8 gentamicin full    4.75 afternoon     124\n#>  9 control    full    5.00 night          62\n#> 10 control    full    5.39 morning        25\n#> # ‚Ñπ 419 more rows\n```\n:::\n\n\n## The test set ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrog_test\n#> # A tibble: 143 √ó 5\n#>    treatment  reflex   age t_o_d     latency\n#>    <fct>      <fct>  <dbl> <fct>       <dbl>\n#>  1 control    full    5.40 morning        22\n#>  2 control    low     4.18 night         360\n#>  3 control    full    4.63 afternoon     224\n#>  4 gentamicin full    4.75 afternoon     158\n#>  5 control    mid     4.22 night          91\n#>  6 gentamicin full    4.89 night         301\n#>  7 control    full    5.38 morning         2\n#>  8 control    full    4.80 afternoon      56\n#>  9 control    full    5.36 morning        11\n#> 10 control    full    5.40 morning        64\n#> # ‚Ñπ 133 more rows\n```\n:::\n\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Split your data so 20% is held out for the test set.*\n\n*Try out different values in `set.seed()` to see how the results change.*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"try-splitting\" style=\"right:0;bottom:0;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Data splitting and spending ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nfrog_split <- initial_split(tree_frogs, prop = 0.8)\nfrog_train <- training(frog_split)\nfrog_test <- testing(frog_split)\n\nnrow(frog_train)\n#> [1] 457\nnrow(frog_test)\n#> [1] 115\n```\n:::\n\n\n# What about a validation set?\n\n##  {background-color=\"white\" background-image=\"https://www.tmwr.org/premade/validation.svg\" background-size=\"50%\"}\n\n:::notes\nWe will use this tomorrow\n:::\n\n##  {background-color=\"white\" background-image=\"https://www.tmwr.org/premade/validation-alt.svg\" background-size=\"40%\"}\n\n# Exploratory data analysis for ML üßê\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Explore the `frog_train` data on your own!*\n\n* *What's the distribution of the outcome, latency?*\n* *What's the distribution of numeric variables like age?*\n* *How does latency differ across the categorical variables?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"explore-frogs\" style=\"right:0;bottom:0;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n::: notes\nMake a plot or summary and then share with neighbor\n:::\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(frog_train, aes(latency)) +\n  geom_histogram(bins = 20)\n```\n\n::: {.cell-output-display}\n![](02-data-budget_files/figure-revealjs/unnamed-chunk-13-1.svg){fig-align='center'}\n:::\n:::\n\n\n:::notes\nThis histogram brings up a concern. What if in our training set we get unlucky and sample few or none of these large values? That could mean that our model wouldn't be able to predict such values. Let's come back to that!\n:::\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(frog_train, aes(latency, treatment, fill = treatment)) +\n  geom_boxplot(alpha = 0.5, show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](02-data-budget_files/figure-revealjs/unnamed-chunk-14-1.svg){fig-align='center'}\n:::\n:::\n\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfrog_train %>%\n  ggplot(aes(latency, reflex, fill = reflex)) +\n  geom_boxplot(alpha = 0.3, show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](02-data-budget_files/figure-revealjs/unnamed-chunk-15-1.svg){fig-align='center'}\n:::\n:::\n\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(frog_train, aes(age, latency, color = reflex)) +\n  geom_point(alpha = .8, size = 2)\n```\n\n::: {.cell-output-display}\n![](02-data-budget_files/figure-revealjs/unnamed-chunk-16-1.svg){fig-align='center'}\n:::\n:::\n\n\n# Split smarter\n\n##\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-data-budget_files/figure-revealjs/unnamed-chunk-17-1.svg){fig-align='center'}\n:::\n:::\n\n\nStratified sampling would split within each quartile\n\n:::notes\nBased on our exploration, we realized that stratifying by latency might help get a consistent distribution. For instance, we'd include high and low latency in both the test and training\n:::\n\n## Stratification\n\nUse `strata = latency`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nfrog_split <- initial_split(tree_frogs, prop = 0.8, strata = latency)\nfrog_split\n#> <Training/Testing/Total>\n#> <456/116/572>\n```\n:::\n\n\n. . .\n\nStratification often helps, with very little downside\n",
    "supporting": [
      "02-data-budget_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.3.5/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.3.5/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}