{
  "hash": "34abff9197cbe142abc26d11f45a3f71",
  "result": {
    "markdown": "---\ntitle: \"Annotations\"\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n<hr size=\"5\">\n\n# 01 - Introduction\n\n## ðŸ‘€\n\nThis page contains _annotations_ for selected slides. \n\nThere's a lot that we want to tell you. We don't want people to have to frantically scribble down things that we say that are not on the slides. \n\nWe've added sections to this document with longer explanations and links to other resources. \n\n<hr size=\"5\">\n\n# 02 - Data Budget\n\n## The initial split\n\nWhat does `set.seed()` do? \n\nWeâ€™ll use pseudo-random numbers (PRN) to partition the data into training and testing. PRN are numbers that emulate truly random numbers (but really are not truly random). \n\nThink of PRN as a box that takes a starting value (the \"seed\") that produces random numbers using that starting value as an input into its process. \n\nIf we know a seed value, we can reproduce our \"random\" numbers. To use a different set of random numbers, choose a different seed value. \n\nFor example: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nrunif(3)\n#> [1] 0.2655087 0.3721239 0.5728534\n\n# Get a new set of random numbers:\nset.seed(2)\nrunif(3)\n#> [1] 0.1848823 0.7023740 0.5733263\n\n# We can reproduce the old ones with the same seed\nset.seed(1)\nrunif(3)\n#> [1] 0.2655087 0.3721239 0.5728534\n```\n:::\n\n\nIf we _donâ€™t_ set the seed, R uses the clock time and the process ID to create a seed. This isnâ€™t reproducible. \n\nSince we want our code to be reproducible, we set the seeds before random numbers are used. \n\nIn theory, you can set the seed once at the start of a script. However, if we do interactive data analysis, we might unwittingly use random numbers while coding. In that case, the stream is not the same and we donâ€™t get reproducible results. \n\nThe value of the seed is an integer and really has no meaning. Max has a script to generate random integers to use as seeds to \"spread the randomness around\". It is basically:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(paste0(\"set.seed(\", sample.int(10000, 5), \")\", collapse = \"\\n\"))\n#> set.seed(9725)\n#> set.seed(8462)\n#> set.seed(4050)\n#> set.seed(8789)\n#> set.seed(1301)\n```\n:::\n\n\n<hr size=\"5\">\n\n# 03 - What Makes A Model?\n\n## What is wrong with this? \n\nIf we treat the preprocessing as a separate task, it raises the risk that we might accidentally overfit to the data at hand. \n\nFor example, someone might estimate something from the entire data set (such as the principle components) and treat that data as if it were known (and not estimated). Depending on the what was done with the data, consequences in doing that could be:\n\n* Your performance metrics are slightly-to-moderately optimistic (e.g. you might think your accuracy is 85% when it is actually 75%)\n* A consequential component of the analysis is not right and the model just doesnâ€™t work. \n\nThe big issue here is that you wonâ€™t be able to figure this out until you get a new piece of data, such as the test set. \n\nA really good example of this is in [â€˜Selection bias in gene extraction on the basis of microarray gene-expression dataâ€™](https://pubmed.ncbi.nlm.nih.gov/11983868/). The authors re-analyze a previous publication and show that the original researchers did not include feature selection in the workflow. Because of that, their performance statistics were extremely optimistic. In one case, they could do the original analysis on complete noise and still achieve zero errors. \n\nGenerally speaking, this problem is referred to as [data leakage](https://en.wikipedia.org/wiki/Leakage_(machine_learning)). Some other references: \n\n * [Overfitting to Predictors and External Validation](https://bookdown.org/max/FES/selection-overfitting.html)\n * [Are We Learning Yet? A Meta Review of Evaluation Failures Across Machine Learning](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/757b505cfd34c64c85ca5b5690ee5293-Abstract-round2.html)\n * [Navigating the pitfalls of applying machine learning in genomics](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=Navigating+the+pitfalls+of+applying+machine+learning+in+genomics&btnG=)\n * [A review of feature selection techniques in bioinformatics](https://academic.oup.com/bioinformatics/article/23/19/2507/185254)\n * [On Over-fitting in Model Selection and Subsequent Selection Bias in Performance Evaluation](https://www.jmlr.org/papers/volume11/cawley10a/cawley10a.pdf)\n\n<hr size=\"5\">\n\n# 04 - Evaluating Models\n\n## Where are the fitted models?\n\nThe primary purpose of resampling is to estimate model performance. The models are almost never needed again. \n\nAlso, if the data set is large, the model object may require a lot of memory to save so, by default, we don't keep them. \n\nFor more advanced use cases, you can extract and save them. See:\n\n * <https://www.tmwr.org/resampling.html#extract>\n * <https://www.tidymodels.org/learn/models/coefficients/> (an example)\n\n\n## Validation set\n\nThe upcoming version of the rsample package (1.2.0) will have a new set of functions specific to validation sets. They will allow you to make an initial _three-way split_ and still use a validation set with the tune package. \n\n<hr size=\"5\">\n\n# 06 - Tuning Hyperparameters\n\n## Update parameter ranges\n\nIn about 90% of the cases, the dials function that you use to update the parameter range has the same name as the argument. For example, if you were to update the `mtry` parameter in a random forests model, the code would look like\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparameter_object %>% \n  update(mtry = mtry(c(1, 100)))\n```\n:::\n\n\nThere are some cases where the parameter function, or its associated values, are different from the argument name. \n\nFor example, with `step_spline_naturall()`, we might want to tune the `deg_free` argument (for the degrees of freedom of a spline function. ). In this case, the argument name is `deg_free` but we update it with `spline_degree()`. \n\n`deg_free` represents the general concept of degrees of freedom and could be associated with many different things. For example, if we ever had an argument that was the number of degrees of freedom for a $t$ distribution, we would call that argument `deg_free`. \n\nFor splines, we probably want a wider range for the degrees of freedom. We made a specialized function called `spline_degree()` to be used in these cases. \n\nHow can you tell when this happens? There is a helper function called `tunable()` and that gives information on how we make the default ranges for parameters. There is a column in these objects names `call_info`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nns_tunable <- \n  recipe(mpg ~ ., data = mtcars) %>% \n  step_spline_natural(dis, deg_free = tune()) %>% \n  tunable()\n\nns_tunable\n#> # A tibble: 1 Ã— 5\n#>   name     call_info        source component           component_id        \n#>   <chr>    <list>           <chr>  <chr>               <chr>               \n#> 1 deg_free <named list [3]> recipe step_spline_natural spline_natural_P1Tjg\nns_tunable$call_info\n#> [[1]]\n#> [[1]]$pkg\n#> [1] \"dials\"\n#> \n#> [[1]]$fun\n#> [1] \"spline_degree\"\n#> \n#> [[1]]$range\n#> [1]  2 15\n```\n:::\n\n\n\n## Early stopping for boosted trees\n\nWhen deciding on the number of boosting iterations, there are two main strategies:\n\n * Directly tune it (`trees = tune()`)\n \n * Set it to one value and tune the number of early stopping iterations (`trees = 500`, `stop_iter = tune()`).\n\nEarly stopping is when we monitor the performance of the model. If the model doesn't make any improvements for `stop_iter` iterations, training stops. \n\nHere's an example where, after eleven iterations, performance starts to get worse. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/early-stopping-1.svg)\n:::\n:::\n\n\nThis is likely due to over-fitting so we stop the model at eleven boosting iterations.  \n\nEarly stopping usually has good results and takes far less time. \n\nWe _could_ an engine argument called `validation` here. That's not an argument to any function in the lightgbm package. \n\nbonsai has its own wrapper around (`lightgbm::lgb.train()`) called `bonsai::train_lightgbm()`. We use that here and it has a `validation` argument.\n\nHow would you know that? There are a few different ways:\n\n * Look at the documentation in `?boost_tree` and click on the `lightgbm` entry in the engine list. \n * Check out the pkgdown reference website <https://parsnip.tidymodels.org/reference/index.html>\n * Run the `translate()` function on the parsnip specification object. \n\nThe first two options are best since they tell you a lot more about the particularities of each model engine (there are a lot for lightgbm). \n\n<hr size=\"5\">\n\n# Extras - Effect Encodings\n\n## Per-agent statistics\n\nThe effect encoding method essentially takes the effect of a variable, like agent, and makes a data column for that effect. In our example, affect of the agent on the ADR is quantified by a model and then added as a data column to be used in the model. \n\nSuppose agent Max has a single reservation in the data and it had an ADR of â‚¬200. If we used a naive estimate for Maxâ€™s effect, the model is being told that Max should always produce an effect of â‚¬200. Thatâ€™s a very poor estimate since it is from a single data point. \n\nContrast this with seasoned agent Davis, who has taken 250 reservations with an average ADR of â‚¬100. Davisâ€™s mean is more predictive because it is estimated with better data (i.e., more total reservations). \nPartial pooling leverages the entire data set and can borrow strength from all of the agents. It is a common tool in Bayesian estimation and non-Bayesian mixed models. If a agentâ€™s data is of good quality, the partial pooling effect estimate is closer to the raw mean. Maxâ€™s data is not great and is \"shrunk\" towards the center of the overall average. Since there is so little known about Maxâ€™s reservation history, this is a better effect estimate (until more data is available for him). \n\nThe Stan documentation has a pretty good vignette on this:  <https://cran.r-project.org/web/packages/rstanarm/vignettes/pooling.html>\n\nAlso, _Bayes Rules!_ has a nice section on this: <https://www.bayesrulesbook.com/chapter-15.html>\n\nSince this example has a numeric outcome, partial pooling is very similar to the Jamesâ€“Stein estimator: <https://en.wikipedia.org/wiki/Jamesâ€“Stein_estimator>\n\n## Agent effects\n\nEffect encoding might result in a somewhat circular argument: the column is more likely to be important to the model since it is the output of a separate model. The risk here is that we might over-fit the effect to the data. For this reason, it is super important to make sure that we verify that we arenâ€™t overfitting by checking with resampling (or a validation set). \n\nPartial pooling somewhat lowers the risk of overfitting since it tends to correct for agents with small sample sizes. It canâ€™t correct for improper data usage or data leakage though. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}