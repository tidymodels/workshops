{
  "hash": "8072aef5e9db75391ba542a1336e312d",
  "result": {
    "markdown": "---\ntitle: \"3 - What makes a model? - Classwork\"\nsubtitle: \"Machine learning with tidymodels\"\neditor_options: \n  chunk_output_type: console\n---\n\n\nWe recommend restarting R between each slide deck!\n\n## Setup\n\nSetup from deck 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.5          ✔ recipes      1.0.6     \n✔ dials        1.2.0          ✔ rsample      1.1.1.9000\n✔ dplyr        1.1.2          ✔ tibble       3.2.1     \n✔ ggplot2      3.4.2          ✔ tidyr        1.3.0     \n✔ infer        1.0.4          ✔ tune         1.1.1.9001\n✔ modeldata    1.1.0          ✔ workflows    1.1.3     \n✔ parsnip      1.1.0.9003     ✔ workflowsets 1.0.1     \n✔ purrr        1.0.1          ✔ yardstick    1.2.0.9001\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\nlibrary(modeldatatoo)\n\ntaxi <- data_taxi()\n\ntaxi <- taxi %>%\n  mutate(month = factor(month, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"))) %>% \n  select(-c(id, duration, fare, tolls, extras, total_cost, payment_type)) %>% \n  drop_na()\n\nset.seed(123)\n\ntaxi_split <- initial_split(taxi, prop = 0.8, strata = tip)\ntaxi_train <- training(taxi_split)\ntaxi_test <- testing(taxi_split)\n```\n:::\n\n\n## Your turn\n\nHow do you fit a linear model in R?\n\nHow many different ways can you think of?\n\nDiscuss with your neighbor!\n\n## To specify a model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model\nlinear_reg()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n\n```{.r .cell-code}\n# Engine\nlinear_reg() %>%\n  set_engine(\"glmnet\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: glmnet \n```\n:::\n\n```{.r .cell-code}\n# Mode - Some models have a default mode, others don't\ndecision_tree() %>% \n  set_mode(\"regression\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecision Tree Model Specification (regression)\n\nComputational engine: rpart \n```\n:::\n:::\n\n\n## Your turn\n\nEdit the chunk below to use a different model!\n\nAll available models are listed at <https://www.tidymodels.org/find/parsnip/> \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <- decision_tree() %>% \n  set_mode(\"classification\")\n\ntree_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecision Tree Model Specification (classification)\n\nComputational engine: rpart \n```\n:::\n:::\n\n\n## A model workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n```\n:::\n\n\nFit with parsnip:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec %>% \n  fit(tip ~ ., data = taxi_train) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nparsnip model object\n\nn= 7045 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 7045 2069 yes (0.70631654 0.29368346)  \n   2) company=Chicago Independents,City Service,Sun Taxi,Taxicab Insurance Agency Llc,other 4328  744 yes (0.82809612 0.17190388)  \n     4) distance< 4.615 2365  254 yes (0.89260042 0.10739958) *\n     5) distance>=4.615 1963  490 yes (0.75038207 0.24961793)  \n      10) distance>=12.565 1069   81 yes (0.92422825 0.07577175) *\n      11) distance< 12.565 894  409 yes (0.54250559 0.45749441)  \n        22) company=Chicago Independents,Sun Taxi,Taxicab Insurance Agency Llc 278   71 yes (0.74460432 0.25539568) *\n        23) company=City Service,other 616  278 no (0.45129870 0.54870130)  \n          46) distance< 7.205 178   59 yes (0.66853933 0.33146067) *\n          47) distance>=7.205 438  159 no (0.36301370 0.63698630) *\n   3) company=Flash Cab,Taxi Affiliation Services 2717 1325 yes (0.51232978 0.48767022)  \n     6) distance< 3.235 1331  391 yes (0.70623591 0.29376409) *\n     7) distance>=3.235 1386  452 no (0.32611833 0.67388167)  \n      14) distance>=12.39 344   90 yes (0.73837209 0.26162791) *\n      15) distance< 12.39 1042  198 no (0.19001919 0.80998081) *\n```\n:::\n:::\n\n\nFit with a workflow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow() %>%\n  add_formula(tip ~ .) %>%\n  add_model(tree_spec) %>%\n  fit(data = taxi_train) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\ntip ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 7045 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 7045 2069 yes (0.70631654 0.29368346)  \n   2) company=Chicago Independents,City Service,Sun Taxi,Taxicab Insurance Agency Llc,other 4328  744 yes (0.82809612 0.17190388)  \n     4) distance< 4.615 2365  254 yes (0.89260042 0.10739958) *\n     5) distance>=4.615 1963  490 yes (0.75038207 0.24961793)  \n      10) distance>=12.565 1069   81 yes (0.92422825 0.07577175) *\n      11) distance< 12.565 894  409 yes (0.54250559 0.45749441)  \n        22) company=Chicago Independents,Sun Taxi,Taxicab Insurance Agency Llc 278   71 yes (0.74460432 0.25539568) *\n        23) company=City Service,other 616  278 no (0.45129870 0.54870130)  \n          46) distance< 7.205 178   59 yes (0.66853933 0.33146067) *\n          47) distance>=7.205 438  159 no (0.36301370 0.63698630) *\n   3) company=Flash Cab,Taxi Affiliation Services 2717 1325 yes (0.51232978 0.48767022)  \n     6) distance< 3.235 1331  391 yes (0.70623591 0.29376409) *\n     7) distance>=3.235 1386  452 no (0.32611833 0.67388167)  \n      14) distance>=12.39 344   90 yes (0.73837209 0.26162791) *\n      15) distance< 12.39 1042  198 no (0.19001919 0.80998081) *\n```\n:::\n:::\n\n\n\"Shortcut\" by specifying the preprocessor and model spec directly in the `workflow()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow(tip ~ ., tree_spec) %>% \n  fit(data = taxi_train) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\ntip ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 7045 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 7045 2069 yes (0.70631654 0.29368346)  \n   2) company=Chicago Independents,City Service,Sun Taxi,Taxicab Insurance Agency Llc,other 4328  744 yes (0.82809612 0.17190388)  \n     4) distance< 4.615 2365  254 yes (0.89260042 0.10739958) *\n     5) distance>=4.615 1963  490 yes (0.75038207 0.24961793)  \n      10) distance>=12.565 1069   81 yes (0.92422825 0.07577175) *\n      11) distance< 12.565 894  409 yes (0.54250559 0.45749441)  \n        22) company=Chicago Independents,Sun Taxi,Taxicab Insurance Agency Llc 278   71 yes (0.74460432 0.25539568) *\n        23) company=City Service,other 616  278 no (0.45129870 0.54870130)  \n          46) distance< 7.205 178   59 yes (0.66853933 0.33146067) *\n          47) distance>=7.205 438  159 no (0.36301370 0.63698630) *\n   3) company=Flash Cab,Taxi Affiliation Services 2717 1325 yes (0.51232978 0.48767022)  \n     6) distance< 3.235 1331  391 yes (0.70623591 0.29376409) *\n     7) distance>=3.235 1386  452 no (0.32611833 0.67388167)  \n      14) distance>=12.39 344   90 yes (0.73837209 0.26162791) *\n      15) distance< 12.39 1042  198 no (0.19001919 0.80998081) *\n```\n:::\n:::\n\n\n## Your turn\n\nEdit the chunk below to make a workflow with your own model of choice!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n\ntree_wflow <- workflow() %>%\n  add_formula(tip ~ .) %>%\n  add_model(tree_spec)\n\ntree_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\ntip ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nDecision Tree Model Specification (classification)\n\nComputational engine: rpart \n```\n:::\n:::\n\n\n## Predict with your model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_fit <-\n  workflow(tip ~ ., tree_spec) %>% \n  fit(data = taxi_train) \n```\n:::\n\n\n## Your turn\n\nWhat do you get from running the following code? What do you notice about the structure of the result?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(tree_fit, new_data = taxi_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,762 × 1\n   .pred_class\n   <fct>      \n 1 yes        \n 2 yes        \n 3 yes        \n 4 yes        \n 5 yes        \n 6 yes        \n 7 yes        \n 8 yes        \n 9 yes        \n10 yes        \n# ℹ 1,752 more rows\n```\n:::\n:::\n\n\n## Your turn\n\nWhat do you get from running the following code? How is `augment()` different from `predict()`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(tree_fit, new_data = taxi_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,762 × 10\n   tip   distance company local dow   month  hour .pred_class .pred_yes .pred_no\n   <fct>    <dbl> <fct>   <fct> <fct> <fct> <int> <fct>           <dbl>    <dbl>\n 1 no       17.5  other   yes   Thu   Apr      12 yes             0.924   0.0758\n 2 yes       2.26 other   no    Fri   Apr      16 yes             0.893   0.107 \n 3 yes       2.71 City S… no    Thu   Apr       8 yes             0.893   0.107 \n 4 yes      18.6  other   no    Mon   Feb      17 yes             0.924   0.0758\n 5 no        1.02 City S… no    Wed   Mar      11 yes             0.893   0.107 \n 6 yes       2    other   no    Sat   Feb      20 yes             0.893   0.107 \n 7 yes       6.81 City S… no    Fri   Feb      23 yes             0.669   0.331 \n 8 yes       2.28 Sun Ta… no    Thu   Apr      22 yes             0.893   0.107 \n 9 yes       0.93 Sun Ta… no    Fri   Mar      18 yes             0.893   0.107 \n10 yes      18.8  City S… no    Tue   Feb       7 yes             0.924   0.0758\n# ℹ 1,752 more rows\n```\n:::\n:::\n\n\n## Understand your model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rpart\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rpart'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dials':\n\n    prune\n```\n:::\n\n```{.r .cell-code}\ntree_fit %>%\n  extract_fit_engine() %>%\n  rpart.plot(roundint = FALSE)\n```\n\n::: {.cell-output-display}\n![](03-classwork_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Your turn\n\nTry extracting the model engine object from your fitted workflow!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Your code here\n```\n:::\n\n\nWhat kind of object is it? What can you do with it?\n\n⚠️ Never `predict()` with any extracted components!\n\nYou can also read the documentation for object extraction:\nhttps://workflows.tidymodels.org/reference/extract-workflow.html\n\n## Your turn\n\nExplore how you might deploy your `tree_fit` model using vetiver.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vetiver)\nlibrary(plumber)\n\n# Create a vetiver model object\nv <- vetiver_model(tree_fit, \"taxi_tips\")\nv\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a predictable Plumber API\npr <- pr() %>%\n  vetiver_api(v)\n\npr\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run the API server in a new window\npr_run(pr)\n```\n:::\n",
    "supporting": [
      "03-classwork_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}