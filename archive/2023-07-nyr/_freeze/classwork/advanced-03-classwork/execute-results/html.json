{
  "hash": "528e1ad06a52f923a430c646236a5726",
  "result": {
    "markdown": "---\ntitle: \"3 - Grid Search via Racing - Classwork\"\nsubtitle: \"Advanced tidymodels\"\neditor_options: \n  chunk_output_type: console\n---\n\n\nWe recommend restarting R between each slide deck!\n\n## Setup\n\nSetup from deck 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.5          ✔ recipes      1.0.6     \n✔ dials        1.2.0          ✔ rsample      1.1.1.9000\n✔ dplyr        1.1.2          ✔ tibble       3.2.1     \n✔ ggplot2      3.4.2          ✔ tidyr        1.3.0     \n✔ infer        1.0.4          ✔ tune         1.1.1.9001\n✔ modeldata    1.1.0          ✔ workflows    1.1.3     \n✔ parsnip      1.1.0.9003     ✔ workflowsets 1.0.1     \n✔ purrr        1.0.1          ✔ yardstick    1.2.0.9001\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n```\n:::\n\n```{.r .cell-code}\nlibrary(modeldatatoo)\nlibrary(textrecipes)\nlibrary(bonsai)\n\n# Max's usual settings: \ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(\n  pillar.advice = FALSE, \n  pillar.min_title_chars = Inf\n)\n\nreg_metrics <- metric_set(mae, rsq)\n\nset.seed(295)\nhotel_rates <- \n  data_hotel_rates() %>% \n  sample_n(5000) %>% \n  arrange(arrival_date) %>% \n  select(-arrival_date_num, -arrival_date) %>% \n  mutate(\n    company = factor(as.character(company)),\n    country = factor(as.character(country)),\n    agent = factor(as.character(agent))\n  )\n\nset.seed(4028)\nhotel_split <-\n  initial_split(hotel_rates, strata = avg_price_per_room)\n\nhotel_tr <- training(hotel_split)\nhotel_te <- testing(hotel_split)\n\nset.seed(472)\nhotel_rs <- vfold_cv(hotel_tr, strata = avg_price_per_room)\n\nhotel_rec <-\n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>%\n  step_YeoJohnson(lead_time) %>%\n  step_dummy_hash(agent,   num_terms = tune(\"agent hash\")) %>%\n  step_dummy_hash(company, num_terms = tune(\"company hash\")) %>%\n  step_zv(all_predictors())\n\nlgbm_spec <- \n  boost_tree(trees = tune(), learn_rate = tune(), min_n = tune()) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"lightgbm\")\n\nlgbm_wflow <- workflow(hotel_rec, lgbm_spec)\n\nlgbm_param <-\n  lgbm_wflow %>%\n  extract_parameter_set_dials() %>%\n  update(`agent hash`   = num_hash(c(3, 8)),\n         `company hash` = num_hash(c(3, 8)))\n```\n:::\n\n\n## Racing \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's use a larger grid\nset.seed(8945)\nlgbm_grid <- \n  lgbm_param %>% \n  grid_latin_hypercube(size = 50)\n\nlibrary(finetune)\n\nset.seed(9)\nlgbm_race_res <-\n  lgbm_wflow %>%\n  tune_race_anova(\n    resamples = hotel_rs,\n    grid = lgbm_grid, \n    metrics = reg_metrics\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'as(<dgTMatrix>, \"dgCMatrix\")' is deprecated.\nUse 'as(., \"CsparseMatrix\")' instead.\nSee help(\"Deprecated\") and help(\"Matrix-deprecated\").\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(lgbm_race_res, metric = \"mae\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 11\n  trees min_n learn_rate `agent hash` `company hash` .metric .estimator  mean\n  <int> <int>      <dbl>        <int>          <int> <chr>   <chr>      <dbl>\n1  1014     5     0.0791           35            181 mae     standard    10.3\n2  1516     7     0.0421          176             12 mae     standard    10.4\n# ℹ 3 more variables: n <int>, std_err <dbl>, .config <chr>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_race(lgbm_race_res) + \n  scale_x_continuous(breaks = pretty_breaks())\n```\n\n::: {.cell-output-display}\n![](advanced-03-classwork_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Your turn\n\nRun `tune_race_anova()` with a different seed.\n\nDid you get the same or similar results?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n",
    "supporting": [
      "advanced-03-classwork_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}