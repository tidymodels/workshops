{
  "hash": "b68ec3789c6815fd7121322033f4366c",
  "result": {
    "markdown": "---\ntitle: \"2 - Your data budget - Classwork\"\nsubtitle: \"Machine learning with tidymodels\"\neditor_options: \n  chunk_output_type: console\n---\n\n\nWe recommend restarting R between each slide deck!\n\n## Data on taxi trips in Chicago in 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.5          ✔ recipes      1.0.6     \n✔ dials        1.2.0          ✔ rsample      1.1.1.9000\n✔ dplyr        1.1.2          ✔ tibble       3.2.1     \n✔ ggplot2      3.4.2          ✔ tidyr        1.3.0     \n✔ infer        1.0.4          ✔ tune         1.1.1.9001\n✔ modeldata    1.1.0          ✔ workflows    1.1.3     \n✔ parsnip      1.1.0.9003     ✔ workflowsets 1.0.1     \n✔ purrr        1.0.1          ✔ yardstick    1.2.0.9001\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\nlibrary(modeldatatoo)\n\ntaxi <- data_taxi()\n\n# Slightly modify the original data for the purposes of this workshop\ntaxi <- taxi %>%\n  mutate(month = factor(month, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"))) %>% \n  select(-c(id, duration, fare, tolls, extras, total_cost, payment_type)) %>% \n  drop_na()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,807 × 7\n   tip   distance company      local dow   month  hour\n   <fct>    <dbl> <fct>        <fct> <fct> <fct> <int>\n 1 yes       1.24 Sun Taxi     no    Thu   Feb      13\n 2 no        5.39 Flash Cab    no    Sat   Mar      12\n 3 yes       3.01 City Service no    Wed   Feb      17\n 4 no       18.4  Sun Taxi     no    Sat   Apr       6\n 5 yes       1.76 Sun Taxi     no    Sun   Jan      15\n 6 yes      13.6  Sun Taxi     no    Mon   Feb      17\n 7 yes       3.71 City Service no    Mon   Mar      21\n 8 yes       4.8  other        no    Tue   Mar       9\n 9 yes      18.0  City Service no    Fri   Jan      19\n10 no       17.5  other        yes   Thu   Apr      12\n# ℹ 8,797 more rows\n```\n:::\n:::\n\n\n## Your turn\n\nWhen is a good time to split your data?\n\n## Data splitting and spending\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ntaxi_split <- initial_split(taxi)\ntaxi_split\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Training/Testing/Total>\n<6605/2202/8807>\n```\n:::\n:::\n\n\nExtract the training and testing sets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_train <- training(taxi_split)\ntaxi_test <- testing(taxi_split)\n```\n:::\n\n\n## Your turn\n\nSplit your data so 20% is held out for the test set.\n\nTry out different values in `set.seed()` to see how the results change.\n\nHint: Which argument in `initial_split()` handles the proportion split into training vs testing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n\n\n## Your turn\n\nExplore the `taxi_train` data on your own!\n\n- What's the distribution of the outcome, tip?\n- What's the distribution of numeric variables like distance?\n- How does tip differ across the categorical variables?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n\n\n## Stratification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ntaxi_split <- initial_split(taxi, prop = 0.8, strata = tip)\ntaxi_train <- training(taxi_split)\ntaxi_test <- testing(taxi_split)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}