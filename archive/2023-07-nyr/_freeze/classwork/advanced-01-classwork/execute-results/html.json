{
  "hash": "e37ca08121037f4f4e24606a28f5ce44",
  "result": {
    "markdown": "---\ntitle: \"1 - Feature Engineering - Classwork\"\nsubtitle: \"Advanced tidymodels\"\neditor_options: \n  chunk_output_type: console\n---\n\n\nWe recommend restarting R between each slide deck!\n\n## Hotel data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        1.0.5          ✔ recipes      1.0.6     \n✔ dials        1.2.0          ✔ rsample      1.1.1.9000\n✔ dplyr        1.1.2          ✔ tibble       3.2.1     \n✔ ggplot2      3.4.2          ✔ tidyr        1.3.0     \n✔ infer        1.0.4          ✔ tune         1.1.1.9001\n✔ modeldata    1.1.0          ✔ workflows    1.1.3     \n✔ parsnip      1.1.0.9003     ✔ workflowsets 1.0.1     \n✔ purrr        1.0.1          ✔ yardstick    1.2.0.9001\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n:::\n\n```{.r .cell-code}\nlibrary(modeldatatoo)\n\n# Max's usual settings: \ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(\n  pillar.advice = FALSE, \n  pillar.min_title_chars = Inf\n)\n\nset.seed(295)\nhotel_rates <- \n  data_hotel_rates() %>% \n  sample_n(5000) %>% \n  arrange(arrival_date) %>% \n  select(-arrival_date_num, -arrival_date) %>% \n  mutate(\n    company = factor(as.character(company)),\n    country = factor(as.character(country)),\n    agent = factor(as.character(agent))\n  )\n```\n:::\n\n\n## Data spending\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(4028)\nhotel_split <-\n  initial_split(hotel_rates, strata = avg_price_per_room)\n\nhotel_tr <- training(hotel_split)\nhotel_te <- testing(hotel_split)\n```\n:::\n\n\n## Your turn\n\nLet's take some time and investigate the _training data_. The outcome is `avg_price_per_room`. \n\nAre there any interesting characteristics of the data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n\n\n## Resampling Strategy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(472)\nhotel_rs <- vfold_cv(hotel_tr, strata = avg_price_per_room)\nhotel_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  10-fold cross-validation using stratification \n# A tibble: 10 × 2\n   splits             id    \n   <list>             <chr> \n 1 <split [3372/377]> Fold01\n 2 <split [3373/376]> Fold02\n 3 <split [3373/376]> Fold03\n 4 <split [3373/376]> Fold04\n 5 <split [3373/376]> Fold05\n 6 <split [3374/375]> Fold06\n 7 <split [3375/374]> Fold07\n 8 <split [3376/373]> Fold08\n 9 <split [3376/373]> Fold09\n10 <split [3376/373]> Fold10\n```\n:::\n:::\n\n\n## A first recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_rec <- \n  recipe(avg_price_per_room ~ ., data = hotel_tr)\n\nsummary(hotel_rec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 4\n   variable                  type      role      source  \n   <chr>                     <list>    <chr>     <chr>   \n 1 lead_time                 <chr [2]> predictor original\n 2 arrival_date_day_of_month <chr [2]> predictor original\n 3 stays_in_weekend_nights   <chr [2]> predictor original\n 4 stays_in_week_nights      <chr [2]> predictor original\n 5 adults                    <chr [2]> predictor original\n 6 children                  <chr [2]> predictor original\n 7 babies                    <chr [2]> predictor original\n 8 meal                      <chr [3]> predictor original\n 9 country                   <chr [3]> predictor original\n10 market_segment            <chr [3]> predictor original\n# ℹ 18 more rows\n```\n:::\n:::\n\n\n## Your turn\n\nWhat do you think are in the `type` vectors for the `lead_time` and `country` columns?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n\n\n## A base recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_rec <- \n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  # create indicator variables\n  step_dummy(all_nominal_predictors()) %>% \n  # filter out constant columns\n  step_zv(all_predictors()) %>% \n  # normalize\n  step_normalize(all_numeric_predictors())\n```\n:::\n\n\n## Different options to reduce correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_rec <- \n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_corr(all_numeric_predictors(), threshold = 0.9)\n\nhotel_rec <- \n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_pca(all_numeric_predictors())\n\nhotel_rec <- \n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_numeric_predictors()) %>% \n  embed::step_umap(all_numeric_predictors(), outcome = vars(avg_price_per_room))\n```\n:::\n\n\n## Other possible steps\n\nFor example, natural splines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_rec <- \n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_spline_natural(year_day, deg_free = 10)\n```\n:::\n\n\n## Your turn \n\nCreate a `recipe()` for the hotel data to:\n\n- use a Yeo-Johnson (YJ) transformation on `lead_time`\n- convert factors to indicator variables\n- remove zero-variance variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n\n\n## Minimal recipe for the hotel data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_indicators <-\n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  step_YeoJohnson(lead_time) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_zv(all_predictors())\n```\n:::\n\n\n\n## Measuring Performance\n\nWe'll compute two measures, mean absolute error (MAE) and the coefficient of determination (a.k.a $R^2$), and focus on the MAE for parameter optimization. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_metrics <- metric_set(mae, rsq)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(9)\n\nhotel_lm_wflow <-\n  workflow() %>%\n  add_recipe(hotel_indicators) %>%\n  add_model(linear_reg())\n \nctrl <- control_resamples(save_pred = TRUE)\nhotel_lm_res <-\n  hotel_lm_wflow %>%\n  fit_resamples(hotel_rs, control = ctrl, metrics = reg_metrics)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: prediction from a rank-deficient fit may be misleading\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x8\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x9\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n```{.r .cell-code}\ncollect_metrics(hotel_lm_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator   mean     n std_err .config             \n  <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n1 mae     standard   17.3      10 0.199   Preprocessor1_Model1\n2 rsq     standard    0.874    10 0.00400 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## Your turn\n\nUse `fit_resamples()` to fit your workflow with a recipe.\n\nCollect the predictions from the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n\n\n## Holdout predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Since we used `save_pred = TRUE`\nlm_val_pred <- collect_predictions(hotel_lm_res)\nlm_val_pred %>% slice(1:7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 5\n  id     .pred  .row avg_price_per_room .config             \n  <chr>  <dbl> <int>              <dbl> <chr>               \n1 Fold01  62.1    20                 40 Preprocessor1_Model1\n2 Fold01  48.0    28                 54 Preprocessor1_Model1\n3 Fold01  64.6    45                 50 Preprocessor1_Model1\n4 Fold01  45.8    49                 42 Preprocessor1_Model1\n5 Fold01  45.8    61                 49 Preprocessor1_Model1\n6 Fold01  30.0    66                 40 Preprocessor1_Model1\n7 Fold01  38.8    88                 49 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## Calibration Plot \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(probably)\n\ncal_plot_regression(hotel_lm_res, alpha = 1 / 5)\n```\n\n::: {.cell-output-display}\n![](advanced-01-classwork_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## What do we do with the agent and company data? \n\nCollapsing factor levels: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_other_rec <-\n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>% \n  step_YeoJohnson(lead_time) %>%\n  step_other(agent, threshold = 0.001) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_zv(all_predictors())\n\nhotel_other_wflow <-\n  hotel_lm_wflow %>%\n  update_recipe(hotel_other_rec)\n\nhotel_other_res <-\n  hotel_other_wflow %>%\n  fit_resamples(hotel_rs, control = ctrl, metrics = reg_metrics)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: prediction from a rank-deficient fit may be misleading\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x4\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x9\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n```{.r .cell-code}\ncollect_metrics(hotel_other_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator   mean     n std_err .config             \n  <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n1 mae     standard   17.4      10 0.205   Preprocessor1_Model1\n2 rsq     standard    0.874    10 0.00417 Preprocessor1_Model1\n```\n:::\n:::\n\n\nFeature Hashing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(textrecipes)\n\nhash_rec <-\n  recipe(avg_price_per_room ~ ., data = hotel_tr) %>%\n  step_YeoJohnson(lead_time) %>%\n  # Defaults to 32 signed indicator columns\n  step_dummy_hash(agent) %>%\n  step_dummy_hash(company) %>%\n  # Regular indicators for the others\n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors())\n\nhotel_hash_wflow <-\n  hotel_lm_wflow %>%\n  update_recipe(hash_rec)\n\nhotel_hash_res <-\n  hotel_hash_wflow %>%\n  fit_resamples(hotel_rs, control = ctrl, metrics = reg_metrics)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'as(<dgTMatrix>, \"dgCMatrix\")' is deprecated.\nUse 'as(., \"CsparseMatrix\")' instead.\nSee help(\"Deprecated\") and help(\"Matrix-deprecated\").\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ A | warning: prediction from a rank-deficient fit may be misleading\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThere were issues with some computations   A: x9\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n```{.r .cell-code}\ncollect_metrics(hotel_hash_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator   mean     n std_err .config             \n  <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n1 mae     standard   17.5      10 0.256   Preprocessor1_Model1\n2 rsq     standard    0.872    10 0.00395 Preprocessor1_Model1\n```\n:::\n:::\n\n\n## Debugging a recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimate the transformation coefficients\nhash_rec_fit <- prep(hash_rec)\n\n# Get the transformation coefficient\ntidy(hash_rec_fit, number = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  terms     value id              \n  <chr>     <dbl> <chr>           \n1 lead_time 0.173 YeoJohnson_zATeA\n```\n:::\n\n```{.r .cell-code}\n# Get the processed data\nbake(hash_rec_fit, hotel_tr %>% slice(1:3), contains(\"_agent_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 30\n  dummyhash_agent_01 dummyhash_agent_02 dummyhash_agent_03 dummyhash_agent_04\n               <int>              <int>              <int>              <int>\n1                  0                  0                  0                  0\n2                  0                 -1                  0                  0\n3                  0                  0                  0                  0\n# ℹ 26 more variables: dummyhash_agent_05 <int>, dummyhash_agent_06 <int>,\n#   dummyhash_agent_07 <int>, dummyhash_agent_08 <int>,\n#   dummyhash_agent_10 <int>, dummyhash_agent_11 <int>,\n#   dummyhash_agent_12 <int>, dummyhash_agent_13 <int>,\n#   dummyhash_agent_14 <int>, dummyhash_agent_15 <int>,\n#   dummyhash_agent_16 <int>, dummyhash_agent_18 <int>,\n#   dummyhash_agent_19 <int>, dummyhash_agent_20 <int>, …\n```\n:::\n:::\n",
    "supporting": [
      "advanced-01-classwork_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}