{
  "hash": "1bdca46c14f3060519ecc1b8ebabc623",
  "result": {
    "markdown": "---\ntitle: \"2 - Your data budget\"\nsubtitle: \"Machine learning with tidymodels\"\nformat:\n  revealjs: \n    slide-number: true\n    footer: <https://workshops.tidymodels.org>\n    include-before-body: header.html\n    include-after-body: footer-annotations.html\n    theme: [default, tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk: \n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.path: \"figures/\"\n---\n\n\n\n\n##  {background-image=\"https://media.giphy.com/media/Lr3UeH9tYu3qJtsSUg/giphy.gif\" background-size=\"40%\"}\n\n\n## Data on Chicago taxi trips\n\n::: columns\n::: {.column width=\"60%\"}\n-   The city of Chicago releases anonymized trip-level data on taxi trips in the city.\n-   We pulled a sample of 10,000 rides occurring in early 2022.\n-   Type `?modeldatatoo::data_taxi()` to learn more about this dataset, including references.\n:::\n\n::: {.column width=\"40%\"}\n![](images/taxi_spinning.svg)\n:::\n\n:::\n\n::: footer\nCredit: <https://www.svgrepo.com/svg/8322/taxi>\n:::\n\n## Which of these variables can we use?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(modeldatatoo)\n\ntaxi <- data_taxi()\n\nnames(taxi)\n#>  [1] \"tip\"          \"id\"           \"duration\"     \"distance\"     \"fare\"        \n#>  [6] \"tolls\"        \"extras\"       \"total_cost\"   \"payment_type\" \"company\"     \n#> [11] \"local\"        \"dow\"          \"month\"        \"hour\"\n```\n:::\n\n\n## Checklist for predictors\n\n- Is it ethical to use this variable? (Or even legal?)\n\n- Will this variable be available at prediction time?\n\n- Does this variable contribute to explainability?\n\n\n## Data on Chicago taxi trips\n\nWe are using a slightly modified version from the modeldatatoo data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi <- taxi %>%\n  mutate(month = factor(month, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"))) %>% \n  select(-c(id, duration, fare, tolls, extras, total_cost, payment_type)) %>% \n  drop_na()\n```\n:::\n\n\n## Data on Chicago taxi trips\n\n::: columns\n::: {.column width=\"60%\"}\n-   `N = 10,000`\n-   A nominal outcome, `tip`, with levels `\"yes\"` and `\"no\"`\n-   6 other variables\n    -   `company`, `local`, and `dow`, and `month` are **nominal** predictors\n    -   `distance` and `hours` are **numeric** predictors\n:::\n\n::: {.column width=\"40%\"}\n![](images/taxi.png)\n:::\n:::\n\n::: footer\nCredit: <https://unsplash.com/photos/7_r85l4eht8>\n:::\n\n:::notes\n`tip`: Whether the rider left a tip. A factor with levels \"yes\" and \"no\".\n\n`distance`: The trip distance, in odometer miles.\n\n`company`: The taxi company, as a factor. Companies that occurred few times were binned as \"other\".\n\n`local`: Whether the trip started in the same community area as it began. See the source data for community area values.\n\n`dow`: The day of the week in which the trip began, as a factor.\n\n`month`: The month in which the trip began, as a factor.\n\n`hour`: The hour of the day in which the trip began, as a numeric.\n\n:::\n\n## Data on Chicago taxi trips\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi\n#> # A tibble: 8,807 √ó 7\n#>    tip   distance company      local dow   month  hour\n#>    <fct>    <dbl> <fct>        <fct> <fct> <fct> <int>\n#>  1 yes       1.24 Sun Taxi     no    Thu   Feb      13\n#>  2 no        5.39 Flash Cab    no    Sat   Mar      12\n#>  3 yes       3.01 City Service no    Wed   Feb      17\n#>  4 no       18.4  Sun Taxi     no    Sat   Apr       6\n#>  5 yes       1.76 Sun Taxi     no    Sun   Jan      15\n#>  6 yes      13.6  Sun Taxi     no    Mon   Feb      17\n#>  7 yes       3.71 City Service no    Mon   Mar      21\n#>  8 yes       4.8  other        no    Tue   Mar       9\n#>  9 yes      18.0  City Service no    Fri   Jan      19\n#> 10 no       17.5  other        yes   Thu   Apr      12\n#> # ‚Ñπ 8,797 more rows\n```\n:::\n\n\n\n## Data splitting and spending\n\nFor machine learning, we typically split data into training and test sets:\n\n. . .\n\n-   The **training set** is used to estimate model parameters.\n-   The **test set** is used to find an independent assessment of model performance.\n\n. . .\n\nDo not üö´ use the test set during training.\n\n## Data splitting and spending\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/test-train-split-1.svg){width=1152}\n:::\n:::\n\n\n# The more data<br>we spend ü§ë<br><br>the better estimates<br>we'll get.\n\n## Data splitting and spending\n\n-   Spending too much data in **training** prevents us from computing a good assessment of predictive **performance**.\n\n. . .\n\n-   Spending too much data in **testing** prevents us from computing a good estimate of model **parameters**.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*When is a good time to split your data?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"when-to-split\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# The testing data is precious üíé\n\n## The initial split ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"} {.annotation}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntaxi_split <- initial_split(taxi)\ntaxi_split\n#> <Training/Testing/Total>\n#> <6605/2202/8807>\n```\n:::\n\n\n:::notes\nHow much data in training vs testing?\nThis function uses a good default, but this depends on your specific goal/data\nWe will talk about more powerful ways of splitting, like stratification, later\n:::\n\n## Accessing the data ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_train <- training(taxi_split)\ntaxi_test <- testing(taxi_split)\n```\n:::\n\n\n## The training set![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxi_train\n#> # A tibble: 6,605 √ó 7\n#>    tip   distance company                   local dow   month  hour\n#>    <fct>    <dbl> <fct>                     <fct> <fct> <fct> <int>\n#>  1 yes       4.54 City Service              no    Sat   Mar      16\n#>  2 no       10.2  Flash Cab                 no    Mon   Feb       8\n#>  3 yes      12.4  other                     no    Sun   Apr      15\n#>  4 yes      15.3  Sun Taxi                  no    Mon   Apr      18\n#>  5 no        6.41 Flash Cab                 no    Wed   Apr      14\n#>  6 yes       1.56 other                     no    Tue   Jan      13\n#>  7 yes       3.13 Flash Cab                 no    Sun   Apr      12\n#>  8 yes       7.54 other                     no    Tue   Apr       8\n#>  9 yes       6.98 Flash Cab                 no    Tue   Apr       5\n#> 10 yes       0.7  Taxi Affiliation Services no    Tue   Jan       9\n#> # ‚Ñπ 6,595 more rows\n```\n:::\n\n\n## The test set ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\nüôà\n\n. . .\n\nThere are 2202 rows and 7 columns in the test set.\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Split your data so 20% is held out for the test set.*\n\n*Try out different values in `set.seed()` to see how the results change.*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"try-splitting\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Data splitting and spending ![](hexes/rsample.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntaxi_split <- initial_split(taxi, prop = 0.8)\ntaxi_train <- training(taxi_split)\ntaxi_test <- testing(taxi_split)\n\nnrow(taxi_train)\n#> [1] 7045\nnrow(taxi_test)\n#> [1] 1762\n```\n:::\n\n\n# What about a validation set?\n\n##  {background-color=\"white\" background-image=\"https://www.tmwr.org/premade/validation.svg\" background-size=\"50%\"}\n\n:::notes\nWe will use this tomorrow\n:::\n\n##  {background-color=\"white\" background-image=\"https://www.tmwr.org/premade/validation-alt.svg\" background-size=\"40%\"}\n\n# Exploratory data analysis for ML üßê\n\n## Your turn {transition=\"slide-in\"}\n\n![](images/parsnip-flagger.jpg){.absolute top=\"0\" right=\"0\" width=\"150\" height=\"150\"}\n\n*Explore the `taxi_train` data on your own!*\n\n* *What's the distribution of the outcome, tip?*\n* *What's the distribution of numeric variables like distance?*\n* *How does tip differ across the categorical variables?*\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"explore-taxi\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n::: notes\nMake a plot or summary and then share with neighbor\n:::\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaxi_train %>% \n  ggplot(aes(x = tip)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](figures/taxi-tip-counts-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaxi_train %>% \n  ggplot(aes(x = tip, fill = local)) +\n  geom_bar() +\n  scale_fill_viridis_d(end = .5)\n```\n\n::: {.cell-output-display}\n![](figures/taxi-tip-by-local-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaxi_train %>% \n  mutate(tip = forcats::fct_rev(tip)) %>% \n  ggplot(aes(x = hour, fill = tip)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](figures/taxi-tip-by-hour-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaxi_train %>% \n  mutate(tip = forcats::fct_rev(tip)) %>% \n  ggplot(aes(x = hour, fill = tip)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](figures/taxi-tip-by-hour-fill-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaxi_train %>% \n  mutate(tip = forcats::fct_rev(tip)) %>% \n  ggplot(aes(x = distance)) +\n  geom_histogram(bins = 100) +\n  facet_grid(vars(tip))\n```\n\n::: {.cell-output-display}\n![](figures/taxi-tip-by-distance-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n# Split smarter\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/taxi-tip-pct-1.svg){width=960}\n:::\n:::\n\n\nStratified sampling would split within response values\n\n:::notes\nBased on our EDA, we know that the source data contains fewer `\"no\"` tip values than `\"yes\"`. We want to make sure we allot equal proportions of those responses so that both the training and testing data have enough of each to give accurate estimates.\n:::\n\n## Stratification\n\nUse `strata = tip`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntaxi_split <- initial_split(taxi, prop = 0.8, strata = tip)\ntaxi_split\n#> <Training/Testing/Total>\n#> <7045/1762/8807>\n```\n:::\n\n\n## Stratification\n\nStratification often helps, with very little downside\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figures/taxi-tip-pct-by-split-1.svg){width=960}\n:::\n:::\n\n\n## The whole game - status update\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/whole-game-split.jpg){fig-align='center' width=1772}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"02-data-budget_files/libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"02-data-budget_files/libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}