---
title: "4 - Evaluating models"
subtitle: "Machine learning with tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://workshops.tidymodels.org>
    include-before-body: header.html
    include-after-body: footer-annotations.html
    theme: [default, tidymodels.scss]
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
---

```{r}
#| include: false
#| file: setup.R
```

## Metrics for model performance `r hexes("yardstick")`

```{r}
#| echo: false
library(tidymodels)
library(countdown)
data("tree_frogs", package = "stacks")
tree_frogs <- tree_frogs %>%
  mutate(t_o_d = factor(t_o_d),
         age = age / 86400) %>% 
  filter(!is.na(latency)) %>%
  select(-c(clutch, hatched))

set.seed(123)
frog_split <- initial_split(tree_frogs, prop = 0.8, strata = latency)
frog_train <- training(frog_split)
frog_test <- testing(frog_split)
tree_spec <- decision_tree(cost_complexity = 0.001, mode = "regression")
tree_wflow <- workflow(latency ~ ., tree_spec)
tree_fit <- fit(tree_wflow, frog_train)
```

```{r}
augment(tree_fit, new_data = frog_test) %>%
  metrics(latency, .pred)
```

. . .

-   RMSE: difference between the predicted and observed values ⬇️
-   $R^2$: squared correlation between the predicted and observed values ⬆️
-   MAE: similar to RMSE, but mean absolute error ⬇️

## Metrics for model performance `r hexes("yardstick")`

```{r}
augment(tree_fit, new_data = frog_test) %>%
  rmse(latency, .pred)
```

## Metrics for model performance `r hexes("yardstick")`

```{r}
augment(tree_fit, new_data = frog_test) %>%
  group_by(reflex) %>%
  rmse(latency, .pred)
```

## Metrics for model performance `r hexes("yardstick")`

```{r}
frog_metrics <- metric_set(rmse, msd)
augment(tree_fit, new_data = frog_test) %>%
  frog_metrics(latency, .pred)
```

##  {background-iframe="https://yardstick.tidymodels.org/reference/index.html"}

::: footer
:::

# We'll talk about classification metrics tomorrow!

# ⚠️ DANGERS OF OVERFITTING ⚠️

## Dangers of overfitting ⚠️

![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-train-1.svg)

## Dangers of overfitting ⚠️

![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-test-1.svg)

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

```{r}
tree_fit %>%
  augment(frog_train)
```

We call this "resubstitution" or "repredicting the training set"

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

```{r}
tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred)
```

We call this a "resubstitution estimate"

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred)
```
:::

::: {.column width="50%"}
:::
:::

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred)
```
:::

::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_test) %>%
  rmse(latency, .pred)
```
:::
:::

. . .

⚠️ Remember that we're demonstrating overfitting 

. . .

⚠️ Don't use the test set until the *end* of your modeling analysis


##  {background-image="https://media.giphy.com/media/55itGuoAJiZEEen9gg/giphy.gif" background-size="70%"}

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Use `augment()` and `metrics()` to compute a regression metric like `mae()`.*

*Compute the metrics for both training and testing data.*

*Notice the evidence of overfitting!* ⚠️

```{r}
#| echo: false
countdown(minutes = 5, id = "augment-metrics")
```

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  metrics(latency, .pred)
```
:::

::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_test) %>%
  metrics(latency, .pred)
```
:::
:::

. . .

What if we want to compare more models?

. . .

And/or more model configurations?

. . .

And we want to understand if these are important differences?

# The testing data are precious 💎

# How can we use the *training* data to compare and evaluate different models? 🤔

##  {background-color="white" background-image="https://www.tmwr.org/premade/resampling.svg" background-size="80%"}

## Cross-validation

![](https://www.tmwr.org/premade/three-CV.svg)

## Cross-validation

![](https://www.tmwr.org/premade/three-CV-iter.svg)

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*If we use 10 folds, what percent of the training data*

-   *ends up in analysis*
-   *ends up in assessment*

*for* **each** *fold?*

![](images/snake.png){width="300"}

```{r}
#| echo: false
countdown(minutes = 3, id = "percent-in-folds")
```

## Cross-validation `r hexes("rsample")`

```{r}
vfold_cv(frog_train) # v = 10 is default
```

## Cross-validation `r hexes("rsample")`

What is in this?

```{r}
frog_folds <- vfold_cv(frog_train)
frog_folds$splits[1:3]
```

::: notes
Talk about a list column, storing non-atomic types in dataframe
:::

## Cross-validation `r hexes("rsample")`

```{r}
vfold_cv(frog_train, v = 5)
```

## Cross-validation `r hexes("rsample")`

```{r}
vfold_cv(frog_train, strata = latency)
```

. . .

Stratification often helps, with very little downside

## Cross-validation `r hexes("rsample")`

We'll use this setup:

```{r}
set.seed(123)
frog_folds <- vfold_cv(frog_train, v = 10, strata = latency)
frog_folds
```

. . .

Set the seed when creating resamples

# We are equipped with metrics and resamples!

## Fit our model to the resamples

```{r}
tree_res <- fit_resamples(tree_wflow, frog_folds)
tree_res
```

## Evaluating model performance `r hexes("tune")`

```{r}
tree_res %>%
  collect_metrics()
```

. . .

We can reliably measure performance using only the **training** data 🎉

## Comparing metrics `r hexes("yardstick")`

How do the metrics from resampling compare to the metrics from training and testing?

```{r}
#| echo: false
frog_training_rmse <-
  tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred) %>%
  pull(.estimate) %>%
  round(digits = 2)

frog_testing_rmse <-
  tree_fit %>%
  augment(frog_test) %>%
  rmse(latency, .pred) %>%
  pull(.estimate) %>%
  round(digits = 2)
```

::: columns
::: {.column width="50%"}
```{r}
tree_res %>%
  collect_metrics() %>% 
  select(.metric, mean, n)
```
:::

::: {.column width="50%"}
The RMSE previously was

- `r frog_training_rmse` for the training set
- `r frog_testing_rmse` for test set
:::
:::

. . .

Remember that:

⚠️ the training set gives you overly optimistic metrics

⚠️ the test set is precious

## Evaluating model performance `r hexes("tune")`

```{r}
# Save the assessment set results
ctrl_frog <- control_resamples(save_pred = TRUE)
tree_res <- fit_resamples(tree_wflow, frog_folds, control = ctrl_frog)

tree_preds <- collect_predictions(tree_res)
tree_preds
```

## 

```{r}
tree_preds %>% 
  ggplot(aes(latency, .pred, color = id)) + 
  geom_abline(lty = 2, col = "gray", size = 1.5) +
  geom_point(alpha = 0.5) +
  coord_obs_pred()
```

## Where are the fitted models? `r hexes("tune")`  {.annotation}

```{r}
tree_res
```

. . .

🗑️

# Alternate resampling schemes

## Bootstrapping

![](https://www.tmwr.org/premade/bootstraps.svg)

## Bootstrapping `r hexes("rsample")`

```{r}
set.seed(3214)
bootstraps(frog_train)
```

##  {background-iframe="https://rsample.tidymodels.org/reference/index.html"}

::: footer
:::

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Create:*

-   *bootstrap folds (change `times` from the default)*
-   *validation set (use the reference guide to find the function)*

*Don't forget to set a seed when you resample!*

```{r}
#| echo: false
countdown(minutes = 5, id = "try-rsample")
```

## Bootstrapping `r hexes("rsample")`

```{r}
set.seed(322)
bootstraps(frog_train, times = 10)
```

## Validation set `r hexes("rsample")`

```{r}
set.seed(853)
validation_split(frog_train, strata = latency)
```

. . .

A validation set is just another type of resample

# Decision tree 🌳

# Random forest 🌳🌲🌴🌵🌴🌳🌳🌴🌲🌵🌴🌲🌳🌴🌳🌵🌵🌴🌲🌲🌳🌴🌳🌴🌲🌴🌵🌴🌲🌴🌵🌲🌵🌴🌲🌳🌴🌵🌳🌴🌳

## Random forest 🌳🌲🌴🌵🌳🌳🌴🌲🌵🌴🌳🌵

- Ensemble many decision tree models

- All the trees vote! 🗳️

- Bootstrap aggregating + random predictor sampling

. . .

- Often works well without tuning hyperparameters (more on this tomorrow!), as long as there are enough trees

## Create a random forest model `r hexes("parsnip")`

```{r}
rf_spec <- rand_forest(trees = 1000, mode = "regression")
rf_spec
```

## Create a random forest model `r hexes("workflows")`

```{r}
rf_wflow <- workflow(latency ~ ., rf_spec)
rf_wflow
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Use `fit_resamples()` and `rf_wflow` to:*

-   *keep predictions*
-   *compute metrics*
-   *plot true vs. predicted values*

```{r}
#| echo: false
countdown(minutes = 8, id = "try-fit-resamples")
```

## Evaluating model performance `r hexes("tune")`

```{r}
ctrl_frog <- control_resamples(save_pred = TRUE)

# Random forest uses random numbers so set the seed first

set.seed(2)
rf_res <- fit_resamples(rf_wflow, frog_folds, control = ctrl_frog)
collect_metrics(rf_res)
```

## 

```{r}
collect_predictions(rf_res) %>% 
  ggplot(aes(latency, .pred, color = id)) + 
  geom_abline(lty = 2, col = "gray", size = 1.5) +
  geom_point(alpha = 0.5) +
  coord_obs_pred()
```

## How can we compare multiple model workflows at once? {background-image="images/Hatching-process.jpg"}


## Evaluate a workflow set

```{r}
workflow_set(list(latency ~ .), list(tree_spec, rf_spec))
```

## Evaluate a workflow set

```{r}
workflow_set(list(latency ~ .), list(tree_spec, rf_spec)) %>%
  workflow_map("fit_resamples", resamples = frog_folds)
```

## Evaluate a workflow set

```{r}
workflow_set(list(latency ~ .), list(tree_spec, rf_spec)) %>%
  workflow_map("fit_resamples", resamples = frog_folds) %>%
  rank_results()
```

The first metric of the metric set is used for ranking. Use `rank_metric` to change that.

. . .

Lots more available with workflow sets, like `collect_metrics()`, `autoplot()` methods, and more!


## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*When do you think a workflow set would be useful?*

```{r}
#| echo: false
countdown(minutes = 3, id = "discuss-workflow-sets")
```

## The final fit `r hexes("tune")`  {.annotation}

Suppose that we are happy with our random forest model.

Let's fit the model on the training set and verify our performance using the test set.

. . .

We've shown you `fit()` and `predict()` (+ `augment()`) but there is a shortcut:

```{r}
# frog_split has train + test info
final_fit <- last_fit(rf_wflow, frog_split) 

final_fit
```

## What is in `final_fit`? `r hexes("tune")`

```{r}
collect_metrics(final_fit)
```

. . .

These are metrics computed with the **test** set

## What is in `final_fit`? `r hexes("tune")`

```{r}
collect_predictions(final_fit)
```

. . .

These are predictions for the **test** set

## 

```{r}
collect_predictions(final_fit) %>%
  ggplot(aes(latency, .pred)) + 
  geom_abline(lty = 2, col = "deeppink4", size = 1.5) +
  geom_point(alpha = 0.5) +
  coord_obs_pred()
```

## What is in `final_fit`? `r hexes("tune")`

```{r}
extract_workflow(final_fit)
```

. . .

Use this for **prediction** on new data, like for deploying

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*End of the day discussion!*

*Which model do you think you would decide to use?*

*What surprised you the most?*

*What is one thing you are looking forward to for tomorrow?*

```{r}
#| echo: false
countdown(minutes = 5, id = "discuss-which-model")
```

